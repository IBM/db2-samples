      ***********************************************************************
      ** (c) Copyright IBM Corp. 2007 All rights reserved.
      ** 
      ** The following sample of source code ("Sample") is owned by International 
      ** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
      ** copyrighted and licensed, not sold. You may use, copy, modify, and 
      ** distribute the Sample in any form without payment to IBM, for the purpose of 
      ** assisting you in the development of your applications.
      ** 
      ** The Sample code is provided to you on an "AS IS" basis, without warranty of 
      ** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
      ** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
      ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
      ** not allow for the exclusion or limitation of implied warranties, so the above 
      ** limitations or exclusions may not apply to you. IBM shall not be liable for 
      ** any damages you suffer as a result of using, copying, modifying or 
      ** distributing the Sample, even if IBM has been advised of the possibility of 
      ** such damages.
      ***********************************************************************
      **
      ** SOURCE FILE NAME: inpcli.sqb 
      **
      ** SAMPLE: Call stored procedures using the GENERAL parameter style
      ** 
      **         This program is the client of a client/server example.
      **         (The server program is called inpsrv.sqb.) The SQLCA status
      **         is returned to the client program.  This program uses an
      **         embedded SQL CALL statement to call a stored procedure.
      **
      ** SQL STATEMENTS USED:
      **         BEGIN DECLARE SECTION 
      **         END DECLARE SECTION 
      **         CONNECT
      **         CALL
      **
      ** STRUCTURES USED:
      **         sqlca
      **
      ** EXTERNAL DEPENDENCIES:
      **        Ensure existence of database for precompile purposes.
      **        Ensure that the stored procedure called from this program
      **        has been built and cataloged with the database (see the
      **        instructions in inpsrv.sqc).
      **        Precompile with the SQL precompiler (PREP in DB2).
      **        Bind to a database (BIND in DB2).
      **        Compile and link loop with the compiler supported on your
      **        platform. All these building steps can be done with the
      **        commands 'bldapp inpcli', or 'make inpcli' (UNIX) or
      **        'nmake inpcli' (Windows).
      **
      ** OUTPUT FILE: inpcli.out (available in the online documentation)
      ***********************************************************************
      **
      ** For more information on the sample programs, see the README file. 
      **
      ** For information on developing COBOL applications, see the 
      ** Application Development Guide.
      **
      ** For information on using SQL statements, see the SQL Reference. 
      **
      ** For the latest information on programming, compiling, and running
      ** DB2 applications, visit the DB2 application development website: 
      **     http://www.software.ibm.com/data/db2/udb/ad
      ***********************************************************************

       Identification Division.
       Program-ID. "inpcli".

       Data Division.
       Working-Storage Section.

      * Copy Files for Constants and Structures.
           copy "sql.cbl".
           copy "sqlenv.cbl".
           copy "sqlca.cbl".

           EXEC SQL BEGIN DECLARE SECTION END-EXEC.                     2
       01 userid            pic x(8).
       01 passwd.
         49 passwd-length   pic s9(4) comp-5 value 0.
         49 passwd-name     pic x(18).
           EXEC SQL END DECLARE SECTION END-EXEC.

       01  CALL-STMT.
           05  FILLER    PIC X(23) VALUE "CALL inpsrv(8,'Canada',".
           05  FILLER    PIC X(11) VALUE "'Ottawa',?)".

       01  SQLCODE-LINE.
           05  FILLER    PIC X(27) VALUE "The SQLCODE from the stored".
           05  FILLER    PIC X(15) VALUE " procedure is: ".
           05  R-SQLCODE PIC --------9.

       77  errloc pic x(80).

      * Declare Host Variables
           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  OUT-SQLCODE                 PIC S9(9)   COMP-5.
       01  CLL-SMT-INF.
           05  CLL-STMT.
           49  CLL-LEN       PIC S9(4)  USAGE COMP-5.
           49  CLL-TEXT      PIC X(100).
           EXEC SQL END DECLARE SECTION END-EXEC.

       Procedure Division.
       Main Section.
           display "Sample COBOL program:  inpcli".

           display "Enter your user id (default none): "
                with no advancing.
           accept userid.

           if userid = spaces
             EXEC SQL CONNECT TO sample END-EXEC
           else
             display "Enter your password : " with no advancing
             accept passwd-name.

      * Passwords in a CONNECT statement must be entered in a VARCHAR format
      * with the length of the input string.
           inspect passwd-name tallying passwd-length for characters
              before initial " ".

           EXEC SQL CONNECT TO sample USER :userid USING :passwd        3
               END-EXEC.
           move "CONNECT TO" to errloc.
           call "checkerr" using SQLCA errloc.

      * Call the Remote Procedure.
           display "Use CALL to invoke the INPSRV stored procedure."

           MOVE           CALL-STMT TO CLL-TEXT.
           MOVE LENGTH OF CALL-STMT TO CLL-LEN.
           EXEC SQL
                PREPARE CLL FROM :CLL-STMT
           END-EXEC
           MOVE "SQL PREPARE" to errloc.
           CALL "checkerr" using SQLCA errloc.

           EXEC SQL
                EXECUTE CLL INTO :OUT-SQLCODE
           END-EXEC
           MOVE OUT-SQLCODE to R-SQLCODE.
           MOVE "SQL EXECUTE" to errloc.
           CALL "checkerr" using SQLCA errloc.

           DISPLAY SQLCODE-LINE.
           DISPLAY "Server Procedure Complete.".

      * Disconnect from Remote Database.
           EXEC SQL CONNECT RESET END-EXEC.
           STOP RUN.
           EXIT.
