      ***********************************************************************
      ** (c) Copyright IBM Corp. 2007 All rights reserved.
      ** 
      ** The following sample of source code ("Sample") is owned by International 
      ** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
      ** copyrighted and licensed, not sold. You may use, copy, modify, and 
      ** distribute the Sample in any form without payment to IBM, for the purpose of 
      ** assisting you in the development of your applications.
      ** 
      ** The Sample code is provided to you on an "AS IS" basis, without warranty of 
      ** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
      ** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
      ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
      ** not allow for the exclusion or limitation of implied warranties, so the above 
      ** limitations or exclusions may not apply to you. IBM shall not be liable for 
      ** any damages you suffer as a result of using, copying, modifying or 
      ** distributing the Sample, even if IBM has been advised of the possibility of 
      ** such damages.
      ***********************************************************************
      **
      ** SOURCE FILE NAME: prepbind.sqb 
      **
      ** SAMPLE: Precompile and bind an embedded SQL program to a database
      **
      **         This program shows how to use the PRECOMPILE and BIND APIs
      **         to prepare an Embedded SQL program to a specified database.
      **
      **         Note: 
      **         The output ".cbl" that is produced by "prepbind" must
      **         be compiled and linked to avoid timestamp conflicts.
      **
      ** DB2 APIs USED:
      **         sqlgpstart -- START DATABASE MANAGER
      **         sqlgprep -- PRECOMPILE PROGRAM
      **         sqlgbndx -- BIND
      **         sqlgpstp -- STOP DATABASE MANAGER
      **
      ** SQL STATEMENTS USED:
      **         BEGIN DECLARE SECTION 
      **         END DECLARE SECTION 
      **         CONNECT
      **
      ** OUTPUT FILE: prepbind.out (available in the online documentation)
      ***********************************************************************
      **
      ** For more information on the sample programs, see the README file. 
      **
      ** For information on developing COBOL applications, see the 
      ** Application Development Guide.
      **
      ** For information on DB2 APIs, see the Administrative API Reference.
      **
      ** For information on using SQL statements, see the SQL Reference. 
      **
      ** For the latest information on programming, compiling, and running
      ** DB2 applications, visit the DB2 application development website: 
      **     http://www.software.ibm.com/data/db2/udb/ad
      ***********************************************************************

       Identification Division.
       Program-Id. "prepbind".

       Data Division.
       Working-Storage Section.

       copy "sqlenv.cbl".
       copy "sqlca.cbl".
       copy "sql.cbl".

           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01 userid.
         49 userid-length        pic s9(4) comp-5 value 0.
         49 userid-name          pic x(9).

       01 passwd.
         49 passwd-length        pic s9(4) comp-5 value 0.
         49 passwd-name          pic x(19).

       01 database.
         49 database-length      pic s9(4) comp-5 value 0.
         49 database-name        pic x(9).

       01 prog.
         49 program-length       pic s9(4) comp-5 value 0.
         49 program-name         pic x(20).

           EXEC SQL END DECLARE SECTION END-EXEC.

       01 prpmsg.
         49 prpmsg-file-length   pic s9(4) comp-5 value 11.
         49 prpmsg-file          pic x(11) value "outprep.msg".

       01 bndmsg.
         49 bndmsg-file-length   pic s9(4) comp-5 value 11.
         49 bndmsg-file          pic x(12) value "outbind.msg".

       01 prepbind.
         $IF P64 SET
             05 prepbind-options occurs 6 times pic s9(27) comp-5.
         $ELSE
             05 prepbind-options occurs 6 times pic s9(9) comp-5.
         $END


       01 bndfile.
         05 bndfile-length       pic s9(4) comp-5 value +0.
         05 bndfile-file         pic x(20).

      * Local Variables
       77 rc                     pic s9(9) comp-5.
       77 errloc                 pic x(80).
       77 user-response          pic x(3).

       Procedure Division.
       prepbind-pgm section.

           display "Sample COBOL Program : PREPBIND.CBL".

           display "starting the database manager".
      *************************************
      * START DATABASE MANAGER API called *
      *************************************
           call "sqlgpstart" using
                                 by value     0
                                 by reference sqlca
                         returning rc.

           display "Enter program name with extension to precompile : "
              with no advancing.
           accept program-name.
           inspect program-name tallying program-length for characters
              before initial " ".
           display " ".

           EXEC SQL CONNECT TO sample END-EXEC.
           display " ".

           move "CONNECT to database" to errloc.
           call "checkerr" using SQLCA errloc.

      * setup prep and bind options
      * (1) - number of options allocated
      * (2) - number of options used
      * (3)-(6) - options/lengths
           move 2            to prepbind-options(1).
           move 2            to prepbind-options(2).
           move SQL-BIND-OPT to prepbind-options(3).
           move 0            to prepbind-options(4).
           move SQL-PKG-OPT  to prepbind-options(5).
           move 0            to prepbind-options(6).

      *************************
      * PRECOMPILE API called *
      *************************
           call "sqlgprep" using
                                 by value     prpmsg-file-length
                                 by value     program-length
                                 by reference sqlca
                                 by reference prepbind
                                 by reference prpmsg-file
                                 by reference program-name
                         returning rc.

           move "PRECOMPILE PROGRAM" to errloc.
           call "checkerr" using SQLCA errloc.

           move SQL-NO-OPT to prepbind-options(3).
           move SQL-NO-OPT to prepbind-options(5).

           string program-name delimited by ".", ".bnd" delimited by
              size into bndfile-file.
           inspect bndfile-file tallying bndfile-length for characters
              before initial " ".

      *******************
      * BIND API called *
      *******************
           call "sqlgbndx" using
                                 by value     bndmsg-file-length
                                 by value     bndfile-length
                                 by reference sqlca
                                 by reference prepbind
                                 by reference bndmsg-file
                                 by reference bndfile-file
                           returning rc.
           move "binding the application" to errloc.
           call "checkerr" using SQLCA errloc.

           display "BIND was successful on ", bndfile-file.
           display "BIND output has been placed in file ", bndmsg-file.

           display "connect reseting".
           EXEC SQL CONNECT RESET END-EXEC.

           move "CONNECT RESET" to errloc.
           call "checkerr" using SQLCA errloc.

           display "Would you like to stop the Database Manager (y/n)"
              with no advancing.
           accept user-response.

           if user-response not equal to "y" and not equal to "Y"
           then stop run.

      * setup stop options structure SQLEDBSTOPOPT
           move 0                   to SQL-ISPROFILE of SQLEDBSTOPOPT.
           move " "                 to SQL-PROFILE of SQLEDBSTOPOPT.
           move 0                   to SQL-ISNODENUM of SQLEDBSTOPOPT.
           move 0                   to SQL-NODENUM of SQLEDBSTOPOPT.
           move SQLE-NONE           to SQL-OPTION of SQLEDBSTOPOPT.
           move SQLE-DROP           to SQL-CALLERAC of SQLEDBSTOPOPT.


      *********************************
      * STOP DATABASE MANAGER API called *
      *********************************
           call "sqlgpstp" using
                                 by reference   SQLEDBSTOPOPT 
                                 by reference   sqlca
                           returning rc.


           move "STOPPING DATABASE MANAGER" to errloc.
           call "checkerr" using SQLCA errloc.

       end-prepbind. stop run.
