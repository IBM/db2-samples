      ***********************************************************************
      ** (c) Copyright IBM Corp. 2007 All rights reserved.
      ** 
      ** The following sample of source code ("Sample") is owned by International 
      ** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
      ** copyrighted and licensed, not sold. You may use, copy, modify, and 
      ** distribute the Sample in any form without payment to IBM, for the purpose of 
      ** assisting you in the development of your applications.
      ** 
      ** The Sample code is provided to you on an "AS IS" basis, without warranty of 
      ** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
      ** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
      ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
      ** not allow for the exclusion or limitation of implied warranties, so the above 
      ** limitations or exclusions may not apply to you. IBM shall not be liable for 
      ** any damages you suffer as a result of using, copying, modifying or 
      ** distributing the Sample, even if IBM has been advised of the possibility of 
      ** such damages.
      ***********************************************************************
      **
      ** SOURCE FILE NAME: outcli.sqb 
      **
      ** SAMPLE: Call stored procedures using the SQLDA structure
      **
      **         This program is the client of a client/server example.  
      **         (The server program is called outsrv.sqb.)  This program 
      **         allocates and initializes a one variable SQLDA, and passes
      **         it to the server program for further processing.  The
      **         filled SQLDA is returned to the client program along with 
      **         the SQLCA status.  This uses an embedded SQL CALL statement
      **         to call a stored procedure.
      **
      **         The outsrv routine will obtain the median salary of
      **         employees in the "staff" table of the "sample" database.
      **         This value will be placed in the output SQLDA and
      **         returned to the outcli routine.  The outcli routine will
      **         then print out the median salary.
      **
      ** SQL STATEMENTS USED:
      **         BEGIN DECLARE SECTION 
      **         END DECLARE SECTION 
      **         CONNECT
      **         CALL
      **
      ** OUTPUT FILE: outcli.out (available in the online documentation)
      ***********************************************************************
      **
      ** For more information on the sample programs, see the README file. 
      **
      ** For information on developing COBOL applications, see the 
      ** Application Development Guide.
      **
      ** For information on using SQL statements, see the SQL Reference. 
      **
      ** For the latest information on programming, compiling, and running
      ** DB2 applications, visit the DB2 application development website: 
      **     http://www.software.ibm.com/data/db2/udb/ad
      ***********************************************************************

       Identification Division.
       Program-ID. "outcli".

       Data Division.
       Working-Storage Section.

      * Copy Files for Constants and Structures.

           copy "sql.cbl".
           copy "sqlenv.cbl".
           copy "sqlca.cbl".
           
           EXEC SQL BEGIN DECLARE SECTION END-EXEC.                     2
       01 userid            pic x(8).
       01 passwd.
         49 passwd-length   pic s9(4) comp-5 value 0.
         49 passwd-name     pic x(18).
           EXEC SQL END DECLARE SECTION END-EXEC.

       01 decimal-sqllen     pic s9(4) comp-5.
       01 decimal-parts      redefines decimal-sqllen.
           05 precision      pic x.
           05 scale          pic x.

      * Declare an Output SQLDA Structure.
       01  io-sqlda sync.
           05 io-sqldaid     pic x(8) value "O-DA   ".
           05 io-sqldabc     pic s9(9) comp-5.
           05 io-sqln        pic s9(4) comp-5.
           05 io-sqld        pic s9(4) comp-5.
           05 io-sqlvar occurs 1 to 1489 times
              depending on io-sqld.
              10 io-sqltype  pic s9(4) comp-5.
              10 io-sqllen   pic s9(4) comp-5.
              10 io-sqldata  usage is pointer.
              10 io-sqlind   usage is pointer.
              10 io-sqlname.
                 15 io-sqlnamel   pic s9(4) comp-5.
                 15 io-sqlnamec   pic x(30).

       EXEC SQL BEGIN DECLARE SECTION END-EXEC.

      * Declare Local Variables for Holding Actual Data.
       77  salary          pic s9(5)v99  comp-3 value 0.
       77  sal-ind         pic s9(4)     comp-5.

       EXEC SQL END DECLARE SECTION END-EXEC.

      * Declare Output Mask for Salary
       77  sal-out         pic z9(5).99-.

      * Declare a Null Pointer Variable.
       77  null-ptr-int    pic s9(9)     comp-5.
       77  null-ptr redefines null-ptr-int pointer.

       77 errloc pic x(80).

       Procedure Division.
       Main Section.
           display "Sample COBOL program:  outcli".

           display "Enter your user id (default none): "
                with no advancing.
           accept userid.

           if userid = spaces
             EXEC SQL CONNECT TO sample END-EXEC
           else
             display "Enter your password : " with no advancing
             accept passwd-name.

      * Passwords in a CONNECT statement must be entered in a VARCHAR format
      * with the length of the input string.
           inspect passwd-name tallying passwd-length for characters
              before initial " ".

           EXEC SQL CONNECT TO sample USER :userid USING :passwd        3
               END-EXEC.
           move "CONNECT TO" to errloc.
           call "checkerr" using SQLCA errloc.

      * Initialize the Input/Output SQLDA Structure
           move 1 to io-sqln.
           move 1 to io-sqld.
           move sql-typ-ndecimal to io-sqltype(1).
      * Length = 7 digits precision and 2 digits scale
           move x"07" to precision.
           move x"02" to scale.
           move decimal-sqllen to io-sqllen(1).
           set io-sqldata(1) to address of salary.
           set io-sqlind(1)  to address of sal-ind.

      * CONNECT TO DATABASE

           EXEC SQL CONNECT TO sample END-EXEC

      * Call the Remote Procedure.
           display "Use CALL with SQLDA to invoke the stored procedure n
      -       "amed OUTSRV."
           EXEC SQL CALL outsrv USING DESCRIPTOR
                                    :IO-SQLDA END-EXEC.
           move "CALL DA" to errloc.
           call "checkerr" using SQLCA errloc.
           DISPLAY "Server Procedure Complete.".

      * Print Salary Returned in IO-SQLDA.
           move salary to sal-out.
           display "Median Salary = " sal-out.

      * Disconnect from Remote Database.
           EXEC SQL CONNECT RESET END-EXEC.
           stop run.
           exit.
