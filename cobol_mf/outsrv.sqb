      ***********************************************************************
      ** (c) Copyright IBM Corp. 2007 All rights reserved.
      ** 
      ** The following sample of source code ("Sample") is owned by International 
      ** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
      ** copyrighted and licensed, not sold. You may use, copy, modify, and 
      ** distribute the Sample in any form without payment to IBM, for the purpose of 
      ** assisting you in the development of your applications.
      ** 
      ** The Sample code is provided to you on an "AS IS" basis, without warranty of 
      ** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
      ** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
      ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
      ** not allow for the exclusion or limitation of implied warranties, so the above 
      ** limitations or exclusions may not apply to you. IBM shall not be liable for 
      ** any damages you suffer as a result of using, copying, modifying or 
      ** distributing the Sample, even if IBM has been advised of the possibility of 
      ** such damages.
      ***********************************************************************
      **
      ** SOURCE FILE NAME: outsrv.sqb 
      **
      ** SAMPLE: Demonstrates stored procedures using the SQLDA structure
      **
      **         This program is the server of a client/server example.  
      **         (The client program is called outcli.sqb)  The program 
      **         fills the SQLDA with the median "SALARY" of the employees 
      **         in the "STAFF" table of the "SAMPLE" database.  The
      **         server program does all the database processing
      **         (finding the median).  The server program returns
      **         the filled SQLDA and the SQLCA status to the client program.
      **
      **         The outsrv routine will obtain the median salary of      
      **         employees in the "staff" table of the "sample" database. 
      **         This value will be placed in the output SQLDA and        
      **         returned to the outcli routine.  The outcli routine will 
      **         then print out the median salary.                        
      **
      ** SQL STATEMENTS USED:
      **         BEGIN DECLARE SECTION 
      **         END DECLARE SECTION 
      **         WHENEVER
      **         DECLARE
      **         PREPARE
      **         SELECT
      **         OPEN
      **         CLOSE
      **         COMMIT
      **         FETCH
      **         ROLLBACK
      **
      ** OUTPUT FILE: outcli.out (available in the online documentation)
      ***********************************************************************
      **
      ** For more information on the sample programs, see the README file. 
      **
      ** For information on developing COBOL applications, see the 
      ** Application Development Guide.
      **
      ** For information on using SQL statements, see the SQL Reference. 
      **
      ** For the latest information on programming, compiling, and running
      ** DB2 applications, visit the DB2 application development website: 
      **     http://www.software.ibm.com/data/db2/udb/ad
      ***********************************************************************

       Identification Division.
       Program-ID. "outsrv".

       Data Division.
       Working-Storage Section.

      * Copy Files for Constants and Structures

       copy "sql.cbl".
       copy "sqlenv.cbl".
       copy "sqlca.cbl".

      * Declare Host Variables
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
         77  num-records  pic s9(9) comp-5 .
         01  stmt.
             49 stmt-len pic s9(4) comp-5.
             49 stmt-str pic x(50).
       EXEC SQL END DECLARE SECTION END-EXEC.

      * Declare Miscellaneous Variables
       77  cntr1 pic s9(9) comp-5 .
       77  cntr2 pic s9(9) comp-5 .

       Linkage Section.

      * Declare Parameters
       77  reserved1   pointer.
       77  reserved2   pointer.
       01  inout-sqlda pointer.
       01  binary-sqlda redefines inout-sqlda pic S9(8) usage comp-5 .

       01 O-SQLCA SYNC.
          05 SQLCAID PIC X(8).
          05 SQLCABC PIC S9(9) COMP-5.
          05 SQLCODE PIC S9(9) COMP-5.
          05 SQLERRM.
             49 SQLERRML PIC S9(4) COMP-5.
             49 SQLERRMC PIC X(70).
          05 SQLERRP PIC X(8).
          05 SQLERRD OCCURS 6 TIMES PIC S9(9) COMP-5.
          05 SQLWARN.
             10 SQLWARN0 PIC X.
             10 SQLWARN1 PIC X.
             10 SQLWARN2 PIC X.
             10 SQLWARN3 PIC X.
             10 SQLWARN4 PIC X.
             10 SQLWARN5 PIC X.
             10 SQLWARN6 PIC X.
             10 SQLWARN7 PIC X.
             10 SQLWARN8 PIC X.
             10 SQLWARN9 PIC X.
             10 SQLWARNA PIC X.
          05 SQLSTATE PIC X(5).

       Procedure Division using reserved1 reserved2 inout-sqlda O-SQLCA.

       Main Section.
           EXEC SQL WHENEVER SQLERROR GOTO ERROR-EXIT END-EXEC.
           EXEC SQL WHENEVER SQLWARNING CONTINUE END-EXEC.

           EXEC SQL DECLARE C1 CURSOR FOR S1 END-EXEC.

      * Prepare a Statement to Obtain and Order all Salaries.
           move 50 to stmt-len.
           move "SELECT salary FROM staff ORDER BY salary" to stmt-str.
           EXEC SQL PREPARE S1 FROM :stmt END-EXEC.

      * Determine Total Number of Records.
           EXEC SQL SELECT COUNT(*) INTO :num-records
                    FROM staff END-EXEC.

           EXEC SQL OPEN C1 END-EXEC.

      * Fetch Salaries until the Median Salary is Obtained.
           move 0 to cntr1.      
           compute cntr2 = 1 + num-records / 2.
           perform Fetch-Row until cntr1 = cntr2.

           EXEC SQL CLOSE C1 END-EXEC.

           EXEC SQL COMMIT END-EXEC.

      * Return the SQLCA Information to the Calling Program.
           move SQLCA to O-SQLCA.
           EXEC SQL COMMIT END-EXEC.
           move SQLZ-HOLD-PROC to return-code
           goback.

       Fetch-Row.
           add 1 to cntr1.
           EXEC SQL FETCH C1 USING DESCRIPTOR :binary-sqlda END-EXEC.

       ERROR-EXIT.
      * An Error has Occurred -- ROLLBACK and Return to Calling Program.
           EXEC SQL WHENEVER SQLERROR CONTINUE END-EXEC.
           move SQLCA to O-SQLCA.
           EXEC SQL ROLLBACK END-EXEC.
           move SQLZ-HOLD-PROC to return-code
           goback.
