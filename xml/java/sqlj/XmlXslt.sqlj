//**************************************************************************
// (c) Copyright IBM Corp. 2007 All rights reserved.
// 
// The following sample of source code ("Sample") is owned by International 
// Business Machines Corporation or one of its subsidiaries ("IBM") and is 
// copyrighted and licensed, not sold. You may use, copy, modify, and 
// distribute the Sample in any form without payment to IBM, for the purpose of 
// assisting you in the development of your applications.
// 
// The Sample code is provided to you on an "AS IS" basis, without warranty of 
// any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
// IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
// not allow for the exclusion or limitation of implied warranties, so the above 
// limitations or exclusions may not apply to you. IBM shall not be liable for 
// any damages you suffer as a result of using, copying, modifying or 
// distributing the Sample, even if IBM has been advised of the possibility of 
// such damages.
//***************************************************************************
//
// SAMPLE FILE NAME: XmlXslt.sqlj
//
// PURPOSE: The purpose of this sample is to show:
//     1. Using the XSLTRANSFORM function to convert one XML document to 
//        another using an XSLT stylesheet.
//     2. Passing an XSL parameter document to the XSLTRANSFORM function
//        at runtime.
//
// USAGE SCENARIO: A supermarket manager maintains a webpage to show
//                 the details of the products available in his shop.
//                 He maintains two tables, namely "product_details"
//                 and "display_productdetails".
//                 The "product_details" table contains information about
//                 all of the products available in his shop, where the
//                 details for each product are in an XML document format.
//                 The "display_productdetails" table contains the XSLT 
//                 stylesheet, which specifies how to display the product
//                 details on the webpage.
//
// PREQUISITES : 1. Create the pre-requisite tables by running the command:
//                    XmlXsltScrpt
//                  Alternatively,you can run the command:
//                    db2 -tvf XmlXslt_setup.db2
//
// EXECUTION : 1. Compile the sample using:
//                   bldsqlj XmlXslt <userid> <password> <server_name> <port_number> <db_name>
//             2. Run the sample as:
//                   java XmlXslt
//             3. Perform a clean up once the sample has been executed using:
//                   db2 -tvf XmlXslt_cleanup.db2
//
// INPUT: NONE
//
// OUTPUT: Displays the new XML documents that result from the XSLT conversion.
//
// OUTPUT FILE: XmlXslt.out (available in the online documentation)
//
// SQL STATEMENTS USED:
//           INSERT
//
// SQL/XML FUNCTIONS USED:
//          XSLTRANSFORM
//
//***************************************************************************
//
// For more information about the command line processor (CLP) scripts,
// see the README file.
//
// For information on using SQL statements, see the SQL Reference.
//
// For the latest information on programming, building, and running DB2
// applications, visit the DB2 application development website:
//     http://www.software.ibm.com/data/db2/udb/ad
//***************************************************************************
//
//  SAMPLE DESCRIPTION
//
//***************************************************************************
// 1. Using the XSLTRANSFORM function to convert one XML document to another
//    using an XSLT stylesheet.
//      1.1 Insert an XML document into the "product_details" table.
//      1.2 Insert an XSL stylesheet into the "display_productdetails" table.
//      1.3 Display the new XML document after transforming the XML document 
//          in the "product_details" table using the XSL stylesheet.
//
// 2. Passing an XSL parameter document to the XSLTRANSFORM function
//    at runtime.
//     2.1 Insert a parameter document into the "param_tab" table.
//     2.2 Display the new XML document after transforming the XML document 
//         in the "product_details" table using XSL the stylesheet with 
//         the parameter document.
//
//**************************************************************************
//
//  INCLUDE ALL PACKAGES AND CLASS FILES
//
//***************************************************************************

import java.lang.*;
import java.sql.*;
import java.io.*;
import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import com.ibm.db2.jcc.DB2Xml;

#sql iterator cursor1(String);

class XmlXslt
{
  public static void main(String argv[])
  {
    int rc=0; 
    Connection con = null;
    String url = "jdbc:db2:sample";
    DefaultContext ctx = null;

    try
    {
      Class.forName("com.ibm.db2.jcc.DB2Driver").newInstance();
      con = DriverManager.getConnection( url ); 

      ctx = new DefaultContext(con);
      DefaultContext.setDefaultContext(ctx);
      System.out.println(); 
      
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}

    System.out.println("This sample shows how to use XSLTRANSFORM");
    System.out.println(" function to convert one XML document  ");
    System.out.println(" into another XML document");

    System.out.println("\n\n-------------------------------------");

    convertXmlToHtml();
    convertXmlToHtmlWithParam();
  } // main

  static void convertXmlToHtml()
  {
    try
    {
      String str = null;

      //***********************************************************************
      // 1. Using the XSLTRANSFORM function to convert one XML document to another
      //    using an XSLT stylesheet.
      //***********************************************************************

     // create table product_details
     System.out.println("The product_details table is created in the setup script \n" +
                        "XmlXslt_setup.db2 using the command \n" +
                        "'CREATE TABLE product_details (productid INTEGER, description XML)' \n");

     // create table display_productdetails
     System.out.println("The display_productdetails table is created in the setup script \n" +
                        "XmlXslt_setup.db2 using the command \n" +
                        "'CREATE TABLE display_productdetails (productid INTEGER,stylesheet CLOB (1M))' \n");

      //***********************************************************************
      //      1.1 Insert an XML document into the "product_details" table.
      //***********************************************************************

      System.out.println("INSERT values into the product_details table");
      System.out.println("");
      #sql {INSERT INTO product_details 
        VALUES (1, '<?xml version="1.0"?> 
          <products xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <product pid="100-201-01">
              <description>
                <name>Ice Scraper, Windshield 4 inch</name>
                <details>Basic Ice Scraper 4 inches wide, foam handle</details>
                <price>3.99</price>
              </description>
              <supermarketname> BIG BAZAR </supermarketname>
            </product>
          </products>') };

      //************************************************************************
      //      1.2 Insert an XSL stylesheet into the "display_productdetails" table.
      //************************************************************************

      System.out.println("INSERT values into the display_productdetails table");
      System.out.println("");
      #sql {INSERT INTO display_productdetails 
        VALUES (1, '<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet 
        version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:param name="headline"/><xsl:param name="supermarketname"/>
        <xsl:template match="products">
        <html>
        <head/>
        <body>
        <h1><xsl:value-of select="$headline"/></h1>
        <table border="1">
        <th><tr><td width="80">product ID</td>
        <td width="200">product name</td><td width="200">price</td>
        <td width="200">details</td><xsl:choose>
        <xsl:when test="$supermarketname =''true'' ">
        <td width="200">supermarket name</td></xsl:when>
        </xsl:choose></tr></th><xsl:apply-templates/>
        </table></body></html></xsl:template> 
        <xsl:template match="product"><tr><td>
        <xsl:value-of select="@pid"/></td><td>
        <xsl:value-of select="/products/product/description/name"/></td>
        <td><xsl:value-of select="/products/product/description/price"/>
        </td><td><xsl:value-of select="/products/product/description/
        details"/></td><xsl:choose><xsl:when test="$supermarketname = 
         ''true'' "><td><xsl:value-of select="/products/product/
        supermarketname"/></td></xsl:when></xsl:choose></tr>
        </xsl:template></xsl:stylesheet>')};
 
      //***********************************************************************
      //  1.3 Display the new XML document after transforming the XML document 
      //      in the "product_details" table using the XSL stylesheet.
      //*********************************************************************** 

      cursor1 cur1;
      System.out.print("SELECT XSLTRANSFORM (description USING stylesheet");
      System.out.print(" AS CLOB (1M)) FROM product_details X,");
      System.out.print("display_productdetails D ");
      System.out.println("WHERE X.productid = D.productid");
      System.out.println("");

      #sql cur1 = {SELECT XSLTRANSFORM (description USING stylesheet 
            AS CLOB (1M)) 
            FROM product_details X, display_productdetails D
            WHERE X.productid = D.productid };

      #sql {FETCH :cur1 INTO :str};

      System.out.println("----------------------------------------------");
      System.out.println( Data.format(str, 1024));
      System.out.println("----------------------------------------------");

      cur1.close();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // convertXmlToHtml
  
  static void convertXmlToHtmlWithParam()
  {
    try
    {
      String str = null;
     
      //*********************************************************************** 
      // 2. Passing an XSL parameter document to the XSLTRANSFORM function
      //    at runtime.
      //
      //***********************************************************************


      System.out.print("This part of the sample shows how to pass ");
      System.out.println(" parameters to XSLTRANSFORM function");
      System.out.println("");

     // create table param_tab
     System.out.println("The param_tab table is created in the setup script \n" +
                        "XmlXslt_setup.db2 using the command \n" +
                        "'CREATE TABLE param_tab(productid INTEGER, param VARCHAR (1000))' \n");

      //***********************************************************************
      //     2.1 Insert a parameter document into the table "param_tab".
      //***********************************************************************

      System.out.println("INSERT parameter values into the param_tab table");
      System.out.println("");
      #sql {INSERT INTO param_tab 
            VALUES (1, '<?xml version="1.0"?>
              <params xmlns="http://www.ibm.com/XSLTransformParameters">
                <param name="supermarketname" value="true"/>
                <param name="headline">BIG BAZAR super market</param>
              </params>')};

      //*************************************************************************
      //     2.2 Display the new XML document after transforming the XML document
      //         in the "product_details" table using the XSL stylesheet with 
      //         the parameter document.
      //*************************************************************************
 
      cursor1 cur1;
      
      System.out.println("DISPLAY final document");
      System.out.println("");
      System.out.print("SELECT XSLTRANSFORM (description USING stylesheet");
      System.out.print(" WITH param AS CLOB (1M)) FROM product_details");
      System.out.print(" X, param_tab P,display_productdetails D");
      System.out.print("WHERE X.productid=P.productid and ");
      System.out.println("X.productid = D.productid");   
      System.out.println("");

      #sql cur1 = {SELECT XSLTRANSFORM (description USING stylesheet 
                   WITH param AS CLOB (1M)) 
                   FROM product_details X,param_tab P,display_productdetails D 
                   WHERE X.productid=P.productid AND X.productid = D.productid};

      #sql {FETCH FROM :cur1 INTO :str};

      System.out.println("----------------------------------------------");
      System.out.println(Data.format(str, 1024));
      System.out.println("----------------------------------------------");
   
      cur1.close();

    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // convertXmlToHtmlWithParam
}
