//***************************************************************************
// (c) Copyright IBM Corp. 2007 All rights reserved.
// 
// The following sample of source code ("Sample") is owned by International 
// Business Machines Corporation or one of its subsidiaries ("IBM") and is 
// copyrighted and licensed, not sold. You may use, copy, modify, and 
// distribute the Sample in any form without payment to IBM, for the purpose of 
// assisting you in the development of your applications.
// 
// The Sample code is provided to you on an "AS IS" basis, without warranty of 
// any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
// IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
// not allow for the exclusion or limitation of implied warranties, so the above 
// limitations or exclusions may not apply to you. IBM shall not be liable for 
// any damages you suffer as a result of using, copying, modifying or 
// distributing the Sample, even if IBM has been advised of the possibility of 
// such damages.
//***************************************************************************
//
// SOURCE FILE NAME: XmlConst.sqlj
//
// SAMPLE: How to create unique index on XML column
//
//  NOTE : 
//         1) This sample demonstrate the how to enforce the
//         constraints on an XML value. There are some statement
//         in the samples which are expected to fail because of 
//         constraint violation so The sql error SQL803N and 
//         SQL20305N are expected.
//
//         2) Primary key, unique constraint, or unique index are not 
//         supported for XML column in the Database Partitioning Feature 
//         available with DB2 Enterprise Server Edition for Linux, UNIX, 
//         and Windows.
//
// SQL Statements USED:
//         SELECT
//         FETCH
//
// Classes used from Util.sqlj are:
//         Db
//         Data
//         SqljException
//
// OUTPUT FILE: XmlConst.out (available in the online documentation)
// Output will vary depending on the JDBC driver connectivity used.
//***************************************************************************
//
// For more information on the sample programs, see the README file.
//
// For information on developing SQLJ applications, see the Application
// Development Guide.
//
// For information on using SQL statements, see the SQL Reference.
//
// For the latest information on programming, compiling, and running DB2
// applications, visit the DB2 application development website at
//     http://www.software.ibm.com/data/db2/udb/ad
//**************************************************************************/

import java.lang.*;
import java.sql.*;
import java.io.*;
import sqlj.runtime.*;
import sqlj.runtime.ref.*;

class XmlConst
{
  public static void main(String argv[])
  {
    try
    {
      Db db = new Db(argv);
      System.out.println();
      System.out.println(
             "THIS SAMPLE SHOWS HOW TO CREATE UNIQUE INDEX ON XML COLUMNS");

      // Connect to 'sample' database
      db.getDefaultContext();
  
      TbUniqueIndexConstraint1();
      dropall();
      TbUniqueIndexConstraint2();
      dropall();
      TbVarcharIndexConstraint(); 
      dropall();
      TbVarcharIndexConstraint1();
   
      //Disconnect from sample database
      db.disconnect(); 

   }
   catch(SQLException sqle)
   {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);	
   }
   catch(Exception e)
   {}
 }
 
static void TbUniqueIndexConstraint1()
{
  try
  {
    System.out.println();
    System.out.println(
          "-------------------------------------------------\n" +
          "USE SQL statement: \n" +
          "CREATE TABLE " +
          "TO CREATE A TABLE. " );

    //execute the query

    System.out.println();
    System.out.println(
         "Execute Statement:" +
         " CREATE TABLE COMPANY(id INT, docname VARCHAR(20), doc XML)");

    #sql {CREATE TABLE COMPANY(id INT, docname VARCHAR(20), doc XML)};

    System.out.println("create unique index using 'UNIQUE' CONSTRAINT.\n");

    System.out.println("CREATE UNIQUE INDEX empindex on company(doc)" +
                    "GENERATE KEY USING XMLPATTERN '/company/emp/@id'"+
                    "AS SQL  DOUBLE");

    #sql {CREATE UNIQUE INDEX empindex on company(doc)  GENERATE KEY
           USING XMLPATTERN '/company/emp/@id' AS SQL  DOUBLE};

    System.out.println("Insert row1 into table \n");

    System.out.println("INSERT INTO company values (1, 'doc1', xmlparse"+
           "(document '<company name=\"Company1\"> <emp id=\"31201\""+
           "salary=\"60000\" gender=\"Female\" DOB=\"10-10-80\">"+
 	   "<name><first>Laura </first><last>Brown</last></name>"+
           "<dept id=\"M25\">Finance</dept><!-- good --></emp>"+
           " </company>'))\n");
 		   
    #sql {
          INSERT INTO company values (1, 'doc1', xmlparse
          (document '<company name="Company1"> <emp id="31201"
          salary="60000" gender="Female" DOB="10-10-80">
          <name><first>Laura </first><last>Brown</last></name>
          <dept id="M25">Finance</dept><!-- good --></emp>
          </company>'))};

    System.out.println("Insert row2 into table \n");
    System.out.println("Unique violation error because of id=\"31201\"\n"); 
    System.out.println("INSERT INTO company values (1, 'doc1', xmlparse"+
         "(document '<company name=\"Company1\"> <emp id=\"31201\""+
         "salary=\"60000\" gender=\"Female\" DOB=\"10-10-80\">"+
         "<name><first>Laura </first><last>Brown</last></name>"+
         "<dept id=\"M25\">Finance</dept><!-- good --></emp>"+
         "</company>'))"); 

    #sql {
         INSERT INTO company values (1, 'doc1', xmlparse
         (document '<company name="Company1"> <emp id="31201"
         salary="60000" gender="Female" DOB="10-10-80">
         <name><first>Laura </first><last>Brown</last></name>
         <dept id="M25">Finance</dept><!-- good --></emp>
         </company>'))};
  }
  catch(SQLException sqle)
  {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      //try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      //catch (Exception e)
     // {
      //}
  }
  catch(Exception e)
  {}

}

static void TbUniqueIndexConstraint2()
{
  try
  {
    System.out.println();
    System.out.println(
          "-------------------------------------------------\n" +
          "USE SQL statement: \n" +
          "CREATE TABLE " +
          "TO CREATE A TABLE. " );

    //execute the query

    System.out.println();
    System.out.println(
         "Execute Statement:" +
         " CREATE TABLE COMPANY(id INT, docname VARCHAR(20), doc XML)");

    #sql {CREATE TABLE COMPANY(id INT, docname VARCHAR(20), doc XML)};

    System.out.println("create unique index using 'UNIQUE' CONSTRAINT.\n");

    System.out.println("CREATE UNIQUE INDEX empindex on company(doc)" +
              "GENERATE KEY USING XMLPATTERN '/company/emp/@id'" +
              " AS SQL  DOUBLE\n");

    #sql {CREATE UNIQUE INDEX empindex on company(doc)  GENERATE KEY
           USING XMLPATTERN '/company/emp/@id' AS SQL  DOUBLE};

    System.out.println("Insert rowr3 into table \n");
    System.out.println("No index entry is inserted because \"ABCDE\" cannot be cast"+
                       " the DOUBLE data type \n");
    System.out.println(" INSERT INTO company values (1, 'doc1', xmlparse"+
           "(document '<company name=\"Company1\"> <emp id=\"ABCDEFG\"" +
           " salary=\"60000\" gender=\"Female\" DOB=\"10-10-80\">" +
           " <name><first>Laura </first><last>Brown</last></name>" +
           "<dept id=\"M25\">Finance</dept><!-- good --></emp>" +
           "</company>'))\n"); 
    #sql {
         INSERT INTO company values (1, 'doc1', xmlparse
         (document '<company name="Company1"> <emp id="ABCDEFG"
          salary="60000" gender="Female" DOB="10-10-80">
          <name><first>Laura </first><last>Brown</last></name>
          <dept id="M25">Finance</dept><!-- good --></emp>
          </company>'))};

    System.out.println("Insert row4 into table \n");

    System.out.println("The insert succeeds because no index entry is" +
              " inserted since \"ABCDE\" cannot be cast to the DOUBLE data type.\n");

    System.out.println("INSERT INTO company values (1, 'doc1', xmlparse"+
           "(document '<company name=\"Company1\"> <emp id=\"ABCDE\"" +
           " salary=\"60000\" gender=\"Female\" " +
           "DOB=\"10-10-80\"><name><first>Laura </first><last>Brown</last>"+
           "</name><dept id=\"M25\">Finance</dept><!-- good --></emp>"+
           "</company>'))\n");   
    #sql {
          INSERT INTO company values (1, 'doc1', xmlparse
         (document '<company name="Company1"> <emp id="ABCDE"
          salary="60000" gender="Female" DOB="10-10-80">
          <name><first>Laura </first><last>Brown</last></name>
          <dept id="M25">Finance</dept><!-- good --></emp>
          </company>'))};

  }
  catch(SQLException sqle)
  {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      //try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      //catch (Exception e)
     // {
     // }
  }
  catch(Exception e)
  {}

}

static void TbVarcharIndexConstraint()
{
  try
  {
    System.out.println();
    System.out.println(
          "-------------------------------------------------\n" +
          "USE SQL statement: \n" +
          "CREATE TABLE " +
          "TO CREATE A TABLE. " );

    //execute the query

    System.out.println();
    System.out.println(
         "Execute Statement:" +
         "CREATE TABLE COMPANY(id INT, docname VARCHAR(20), doc XML)");

    #sql {CREATE TABLE COMPANY(id INT, docname VARCHAR(20), doc XML)};

    System.out.println("create unique index using 'UNIQUE' CONSTRAINT.\n");

    System.out.println("CREATE UNIQUE INDEX empindex on company(doc) "+
              "GENERATE KEY USING XMLPATTERN '/company/emp/@id'"+
              "AS SQL  VARCHAR(4)\n");

    #sql {CREATE UNIQUE INDEX empindex on company(doc)  GENERATE KEY
           USING XMLPATTERN '/company/emp/@id' AS SQL  VARCHAR(4)};

    System.out.println("Insert row5 into table \n");

    System.out.println("Insert statement succeeds because the length of \"312\" < 4.\n");

    System.out.println("INSERT INTO company values (1, 'doc1', xmlparse"+
          "(document '<company name=\"Company1\"> <emp id=\"312\"" +
          "salary=\"60000\" gender=\"Female\" DOB=\"10-10-80\">"+
          "<dept id=\"M25\">Finance</dept><!-- good --></emp>" +
          "</company>'))\n"); 
 
    #sql {
         INSERT INTO company values (1, 'doc1', xmlparse
         (document '<company name="Company1"> <emp id="312"
         salary="60000" gender="Female" DOB="10-10-80">
         <name><first>Laura </first><last>Brown</last></name>
         <dept id="M25">Finance</dept><!-- good --></emp>
         </company>'))};
    
    System.out.println("Insert row6 into table \n");
    System.out.println("Insert statement fails because the length of \"31202\" > 4.\n");
    System.out.println("INSERT INTO company values (1, 'doc1', xmlparse"+
         "(document '<company name=\"Company1\"> <emp id=\"31202\""+
         "salary=\"60000\" gender=\"Female\" DOB=\"10-10-80\">"+
         "<name><first>Laura </first><last>Brown</last></name>"+
         "<dept id=\"M25\">Finance</dept><!-- good --></emp>"+
         "</company>'))\n");    

    #sql {
          INSERT INTO company values (1, 'doc1', xmlparse
          (document '<company name="Company1"> <emp id="31202"
          salary="60000" gender="Female" DOB="10-10-80">
          <name><first>Laura </first><last>Brown</last></name>
          <dept id="M25">Finance</dept><!-- good --></emp>
          </company>'))};

  }
  catch(SQLException sqle)
  {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      //try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      //catch (Exception e)
     // {
      //}
  }
  catch(Exception e)
  {}

} 

static void TbVarcharIndexConstraint1()
{
  try
  {
    System.out.println();
    System.out.println(
          "-------------------------------------------------\n" +
          "USE SQL statement: \n" +
          "CREATE TABLE " +
          "TO CREATE A TABLE. " );

    //execute the query

    System.out.println();
    System.out.println(
         "Execute Statement:" +
         "CREATE TABLE COMPANY(id INT, docname VARCHAR(20), doc XML)");

    #sql {CREATE TABLE COMPANY(id INT, docname VARCHAR(20), doc XML)};
    System.out.println("Insert row7 into table \n");
    System.out.println("INSERT INTO company values (1, 'doc1', xmlparse"+
          "(document '<company name=\"Company1\"> <emp id=\"312\"" +
          "salary=\"60000\" gender=\"Female\" DOB=\"10-10-80\">"+
          "<dept id=\"M25\">Finance</dept><!-- good --></emp>" +
          "</company>'))\n");

    #sql {
         INSERT INTO company values (1, 'doc1', xmlparse
         (document '<company name="Company1"> <emp id="312"
         salary="60000" gender="Female" DOB="10-10-80">
         <name><first>Laura </first><last>Brown</last></name>
         <dept id="M25">Finance</dept><!-- good --></emp>
         </company>'))};

    System.out.println("Insert row8 into table \n");
    System.out.println("INSERT INTO company values (1, 'doc1', xmlparse"+
         "(document '<company name=\"Company1\"> <emp id=\"31202\""+
         "salary=\"60000\" gender=\"Female\" DOB=\"10-10-80\">"+
         "<name><first>Laura </first><last>Brown</last></name>"+
         "<dept id=\"M25\">Finance</dept><!-- good --></emp>"+
         "</company>'))\n");

    #sql {
          INSERT INTO company values (1, 'doc1', xmlparse
          (document '<company name="Company1"> <emp id="31202"
          salary="60000" gender="Female" DOB="10-10-80">
          <name><first>Laura </first><last>Brown</last></name>
          <dept id="M25">Finance</dept><!-- good --></emp>
          </company>'))};

    System.out.println("create index with Varchar constraint " +
                       "fails because the length of \"31202\" > 4\n");

    System.out.println("CREATE UNIQUE INDEX empindex on company(doc) "+
              "GENERATE KEY USING XMLPATTERN '/company/emp/@id'"+
              "AS SQL  VARCHAR(4)\n");

    #sql {CREATE UNIQUE INDEX empindex on company(doc)  GENERATE KEY
           USING XMLPATTERN '/company/emp/@id' AS SQL  VARCHAR(4)};


  }
  catch (SQLException sqle)
  {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
  }
  catch(Exception e)
  {}

}
static void dropall()
{
  try
  {
    System.out.println("drop index and table\n");
    #sql {DROP index "EMPINDEX"};
    #sql {DROP table "COMPANY"};
    #sql {COMMIT};
  }
  catch (Exception e)
  {
    System.out.println(e);
  }
}
}
