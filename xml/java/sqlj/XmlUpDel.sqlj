//***************************************************************************
// (c) Copyright IBM Corp. 2007 All rights reserved.
// 
// The following sample of source code ("Sample") is owned by International 
// Business Machines Corporation or one of its subsidiaries ("IBM") and is 
// copyrighted and licensed, not sold. You may use, copy, modify, and 
// distribute the Sample in any form without payment to IBM, for the purpose of 
// assisting you in the development of your applications.
// 
// The Sample code is provided to you on an "AS IS" basis, without warranty of 
// any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
// IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
// not allow for the exclusion or limitation of implied warranties, so the above 
// limitations or exclusions may not apply to you. IBM shall not be liable for 
// any damages you suffer as a result of using, copying, modifying or 
// distributing the Sample, even if IBM has been advised of the possibility of 
// such damages.
//***************************************************************************
//
// SOURCE FILE NAME: XmlUpDel.sqlj
//
// SAMPLE: How to insert XML document into a column of XML Datatype
//
// SQL Statements USED:
//         INSERT
//         ROLLBACK
//
// Classes used from Util.sqlj are:
//         Db
//         SqljException
//
// PREQUISITES : 1. copy the files cust1021.xml, cust1022 and
//                  cust1023.xml to working directory 
//               2. Create the pre-requisite tables by running the command:
//                    XmlUpDelScrpt
//                  Alternatively,you can run the command:
//                    db2 -tvf XmlUpDel_setup.db2
//
// EXECUTION : 1. Compile the sample using:
//                   bldsqlj XmlUpDel <userid> <password> <server_name> <port_number> <db_name>
//             2. Run the sample as:
//                   java XmlUpDel
//             3. Perform a clean up once the sample has been executed using:
//                   db2 -tvf XmlUpDel_cleanup.db2
//
// OUTPUT FILE: XmlUpDel.out (available in the online documentation)
// Output will vary depending on the JDBC driver connectivity used.
//***************************************************************************
//
// For more information on the sample programs, see the README file.
//
// For information on developing SQLJ applications, see the Application
// Development Guide.
//
// For information on using SQL statements, see the SQL Reference.
//
// For the latest information on programming, compiling, and running DB2
// applications, visit the DB2 application development website at
//     http://www.software.ibm.com/data/db2/udb/ad
//**************************************************************************/
import java.lang.*;
import java.util.*;
import java.io.*;
import java.sql.*;
import sqlj.runtime.*;
import sqlj.runtime.ref.*;

#sql iterator TbXMLUpDel_cursor1(int, String); 

class XmlUpDel
{
  public static void main(String argv[])
  {
    try
    {
      Db db = new Db(argv);

      // Connect to 'sample' database
      db.getDefaultContext();

      System.out.println();
      System.out.println("THIS SAMPLE SHOWS HOW TO UPDATE TABLE HAVING"+
             "XML COLUMNS. \n");

      preRequisites();
      mostSimpleUpdatewithConstantString();
      UpdatewhereSourceisAnotherXmlColumn();
      UpdatewhereSourceisAnotherStringColumn();
      UpdateAnotherStringColumnWithImplicitParsing();
      UpdateUsingVarcharWithImplicitParsing();
      UpdatewithValidation();
      UpdatewhereSourceisBlob();
      UpdatewhereSourceisBlobWithImplicitParsing();
      UpdatewhereSourceisClob();
      SetRegisterWithPreserveWhitespace();
      DeleteofRowwithXmlData();


     // disconnect from the 'sample' database
      db.disconnect();
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
   }
   catch(Exception e)
   {}

  } //main

  static void mostSimpleUpdatewithConstantString()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      System.out.println();
      System.out.println(
          "----------------------------------------------------------\n\n" +
          "USE THE SQL STATEMENT:\n" +
          "  UPDATE\n" +
          "TO PERFORM A SIMPLE UPDATE.");

      // display the content of the 'customer' table
      //CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
          " UPDATE customer\n" +
          " SET info=XMLPARSE(document'<newcustomerinfo><name>"+
          " rohit<street>park street</street>\n" +
          " <city>delhi</city></name></newcustomerinfo>'preserve" +
          " whitespace) WHERE cid=1008\n" +
          " \n");

      #sql { 
          UPDATE customer
          SET info=XMLPARSE(document'<newcustomerinfo><name>
          rohit<street>park street</street>
          <city>delhi</city></name></newcustomerinfo>'preserve whitespace)
          WHERE cid=1008};

      System.out.println();
      System.out.println();
 
      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
   }
   catch(Exception e)
   {}
  } // mostSimpleUpdatewithConstantString

  static void UpdatewhereSourceisAnotherXmlColumn()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      System.out.println(
          "----------------------------------------------------------\n\n" +
          "USE THE SQL STATEMENT:\n" +
          "  UPDATE\n" +
          "TO PERFORM AN UPDATE WHERE SOURCE IS FROM ANOTHER XML COLUMN.");

      // display the content of the 'customer' table
      // CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
             " UPDATE customer\n" +
             " SET info=(SELECT information FROM oldcust p\n" +
             " WHERE p.ocid=1009)\n" +
             " WHERE cid=1008\n" +
             "\n");

     #sql {
          UPDATE customer
          SET info=(SELECT information
          FROM oldcust p
          WHERE p.ocid=1009)
          WHERE cid=1008};

      System.out.println();
      System.out.println();
      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);

    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
   }
   catch(Exception e)
   {}
  } // UpdatewhereSourceisAnotherXmlColumn

  static void UpdatewhereSourceisAnotherStringColumn()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      System.out.println();
      System.out.println(
          "--------------------------------------------\n\n" +
          " USE THE SQL STATEMENT:\n" +
          " UPDATE\n" +
          " TO PERFORM AN UPDATE WHERE SOURCE IS FROM "+
          " ANOTHER STRING COLUMN.");

      // display the content of the 'customer' table
      // CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
          " UPDATE customer\n" +
          " SET info=(SELECT XMLPARSE(document addr preserve whitespace)\n" +
          " FROM oldcust p\n" +
          " WHERE p.ocid=1009)\n" +
          " WHERE cid=1008\n" +
          "\n");

      #sql {
          UPDATE customer
          SET info=(SELECT XMLPARSE(document addr preserve whitespace)
          FROM oldcust p
          WHERE p.ocid=1009)
          WHERE cid=1008};
      
      System.out.println();
      System.out.println();
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
   }
   catch(Exception e)
   {}
  } // UpdatewhereSourceisAnotherStringColumn

  static void UpdateAnotherStringColumnWithImplicitParsing()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      System.out.println();
      System.out.println(
          "--------------------------------------------\n\n" +
          " USE THE SQL STATEMENT:\n" +
          "  UPDATE\n" +
          " TO PERFORM AN UPDATE WHERE SOURCE IS FROM "+
          " ANOTHER STRING COLUMN" +
          " WITH IMPLICIT PARSING.");

      System.out.println();
      System.out.println("  Perform:\n" +
          " UPDATE customer\n" +
          " SET info=SELECT addr " +
          " FROM oldcust p\n" +
          " WHERE p.ocid=1009)\n" +
          " WHERE cid=1008\n" +
          "\n");

      #sql {
          UPDATE customer
          SET info=(SELECT addr 
          FROM oldcust p
          WHERE p.ocid=1009)
          WHERE cid=1008};

      System.out.println();
      System.out.println();
  
      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
   }
   catch(Exception e)
   {}
  } //UpdateAnotherStringColumnWithImplicitParsing

  static void UpdateUsingVarcharWithImplicitParsing()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      System.out.println();
      System.out.println(
          "----------------------------------------------------------\n\n" +
          "USE THE SQL STATEMENT:\n" +
          "  UPDATE\n" +
          "TO PERFORM A UPDATE USING VARCHAR WITH IMPLICIT PARSING.");

      // display the content of the 'customer' table
      // CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
          " UPDATE customer\n" +
          " SET info='<newcustomerinfo><name>"+
          " rohit<street>park street</street>\n" +
          " <city>delhi</city></name></newcustomerinfo>'" +
          " WHERE cid=1008\n" +
          " \n");

      #sql {
          UPDATE customer
          SET info = '<newcustomerinfo><name>
          rohit<street>park street</street>
          <city>delhi</city></name></newcustomerinfo>'
          WHERE cid=1008};

      System.out.println();
      System.out.println();

      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
   }
   catch(Exception e)
   {}

  } //UpdateUsingVarcharWithImplicitParsing

  static void UpdatewithValidation()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      System.out.println();
      System.out.println(
          "------------------------------------------------\n\n" +
          "USE THE SQL STATEMENT:\n" +
          " UPDATE\n" +
          " TO PERFORM AN UPDATE WITH VALIDATION WHERE "+
          " SOURCE IS TYPED OF VARCHAR.");

      //  display the content of the 'customer' table
      // CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
           " UPDATE customer\n" +
           " SET info=(SELECT XMLVALIDATE(XMLPARSE"+
           " (document addr preserve whitespace)\n" +
           " according to XMLSCHEMA ID customer)\n" +
           " FROM oldcust p\n" +
           " WHERE p.ocid=1009)\n" +
           " WHERE cid=1008\n" +
           "\n");

      #sql { 
           UPDATE customer
           SET info=(SELECT XMLVALIDATE(XMLPARSE(document 
           addr preserve whitespace)
           according to XMLSCHEMA ID customer)
           FROM oldcust p
           WHERE p.ocid=1009)
           WHERE cid=1008};

      System.out.println();
      System.out.println();

      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);

    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
   }
   catch(Exception e)
   {}

  } // UpdatewithValidation

  static void UpdatewhereSourceisBlob()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      String xsdData = new String();
      xsdData=returnFileValues("cust1021.xml");
      byte[] Array=xsdData.getBytes();
    
      // Create a BLOB object
      java.sql.Blob blobData = 
         com.ibm.db2.jcc.t2zos.DB2LobFactory.createBlob(Array);

      System.out.println();
      System.out.println(
          "-------------------------------------------------\n\n" +
          "USE THE SQL STATEMENT:\n" +
          "  UPDATE\n" +
          "TO PERFORM AN  UPDATE WHERE SOURCE IS A BLOB VARIABLE.");

      // display the content of the 'customer' table
      //CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
                       " UPDATE customer\n" +
                       " SET INFO= XMLPARSE(document "  +
                       " cast(? as Blob) strip whitespace)\n" +
                       " WHERE cid=1008\n" +
                       "\n");

      #sql {
          UPDATE customer SET INFO = XMLPARSE( 
          document cast(:blobData as Blob) strip whitespace)
          WHERE cid=1008};

      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }	
    catch(Exception e)
    {}
  } // UpdatewhereSourceisBlob

  static void UpdatewhereSourceisBlobWithImplicitParsing()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      String xsdData = new String();
      xsdData=returnFileValues("cust1022.xml");
      byte[] Array=xsdData.getBytes();
 
      // Create a BLOB object
      java.sql.Blob blobData =
         com.ibm.db2.jcc.t2zos.DB2LobFactory.createBlob(Array);

      System.out.println();
      System.out.println(
          "-------------------------------------------------\n\n" +
          "USE THE SQL STATEMENT:\n" +
          "  UPDATE\n" +
          "TO PERFORM AN  UPDATE WHERE SOURCE IS A BLOB VARIABLE"+
          " WITH IMPLICIT PARSING \n");

      // display the content of the 'customer' table
      //CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
                       " UPDATE customer\n" +
                       " SET INFO= :blobData "  +
                       " WHERE cid=1008\n" +
                       "\n");

      #sql {
          UPDATE customer SET INFO = 
          :blobData 
          WHERE cid=1008};

      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } //UpdatewhereSourceisBlobWithImplicitParsing

  static void UpdatewhereSourceisClob()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      String Data = new String();
      Data=returnFileValues("cust1023.xml");

      // Create a CLOB object
      java.sql.Clob clobData = 
         com.ibm.db2.jcc.t2zos.DB2LobFactory.createClob(Data);

      System.out.println();
      System.out.println(
          "----------------------------------------------\n\n" +
          "USE THE SQL STATEMENT:\n" +
          "    UPDATE\n" +
          "TO PERFORM AN  UPDATE WHERE SOURCE IS A CLOB VARIABLE.");

      // display the content of the 'customer' table
      //CustomerTbContentDisplay(1008);
      
      System.out.println();
      System.out.println("  Perform:\n" +
                       " UPDATE customer\n" +
                       " SET INFO= XMLPARSE(document "  +
                       " cast(? as Clob) strip whitespace)\n" +
                       " WHERE cid=1008\n" +
                       "\n");

      #sql {
          UPDATE customer
          SET INFO=XMLPARSE(document cast(:clobData as Clob) strip whitespace)
          WHERE cid=1008};

      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // UpdatewhereSourceisClob

  static void SetRegisterWithPreserveWhitespace()
  {
    try
    {
      String parse_option = "preserve whitespace";

      System.out.println();
      System.out.println(
          "--------------------------------------------\n\n" +
          " USE THE SQL STATEMENT:\n" +
          "  SET CURRENT\n" +
          " TO SET CURRENT IMPLICIT XMLPARSE OPTION\n");

      // display the content of the 'customer' table
      // CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
           "SET CURRENT IMPLICIT XMLPARSE OPTION\n");

      #sql {
          SET CURRENT IMPLICIT XMLPARSE OPTION = :parse_option};
  
      System.out.println();
      System.out.println();
    } 
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } //SetRegisterWithPreserveWhitespace

  // helping function
  static void preRequisites()
  {
    try
    {
      //create table 'oldcust'

      System.out.println("The table oldcust is created in the setup script \n" +
                         "XmlUpDel_setup.db2 using the command \n" + 
                         "'CREATE TABLE oldcust(ocid integer, \n" +
                         "        firstname varchar(15), \n" +
                         "        lastname varchar(15), \n" +
                         "        addr varchar(400), \n" +
                         "        information XML)' \n"); 
	
      // populate table oldcust with data

      System.out.println("Insert row into oldcust table \n");	 	
      #sql {
        INSERT INTO oldcust VALUES(1009,'Rahul','kumar',
        '<customerinfo Cid="1009">
        <name>Rahul</name><addr country="Canada"><street>25
        </street><city>Markham</city><prov-state>Ontario</prov-state>
        <pcode-zip>N9C-3T6</pcode-zip></addr><phone type="work">
        905-555-725 8</phone></customerinfo>',XMLPARSE(document
        '<oldcustomerinfo ocid="1009"><address country=
        "Canada"><street>25 Westend</street><city>Markham</city>
        <state>Ontario</state></address></oldcustomerinfo>'
        preserve whitespace))};

      System.out.println("Insert row into customer table \n");	 	

      #sql {
        INSERT INTO customer(cid,info) VALUES(1008 ,XMLPARSE(document
        '<customerinfo Cid="1008"><name>divya</name></customerinfo>'
         preserve whitespace))};

    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
   }
   catch(Exception e)
   {}
  } //preRequisites

  static void CustomerTbContentDisplay(int Cid)
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      System.out.println();
      System.out.println(
           "    SELECT cid,XMLSERIALIZE(info as varchar(600))\n" +
           "    FROM  customer WHERE cid=" + Cid);

      TbXMLUpDel_cursor1 cur1;

      #sql cur1 = {SELECT cid,XMLSERIALIZE(info as varchar(600)) FROM customer WHERE customer.cid = :Cid};

      System.out.println(
           "    CUSTOMERID    CUSTOMERINFO \n" +
           "    ----------    -------------- ");

      #sql {FETCH :cur1 INTO :customerid, :customerInfo};

      // retrieve and display the result from the SELECT statement
      while (true)
      {
        if (cur1.endFetch())
        {
               break;
        }
        System.out.println(
          "   " +
        Data.format(customerid, 10)  + "   " +
        Data.format(customerInfo, 1024));

        #sql {FETCH :cur1 INTO :customerid, :customerInfo};
      }
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // CustomerTableContentDisplay
 

  // this function will Read a file in a buffer 
  // and return the String value to cal
  public static String returnFileValues(String fileName)
  {
    String record = null;
    try
    {
      FileReader fr     = new FileReader(fileName);
      BufferedReader br = new BufferedReader(fr);
      record = new String();
      record = br.readLine();
      String descReturn=record;
      while ((record = br.readLine()) != null)
        descReturn=descReturn+record;
        return descReturn;
    }
    catch (Exception e)
    {
       // catch possible io errors from readLine()
       System.out.println("     file " + fileName + "doesn't exist");

       System.out.println("     Quitting program!");
       System.out.println();
       System.exit(-1);
    }
    return null;
  }// returnFileValues

  static void DeleteofRowwithXmlData()
  {
    try
    {
      int customerid = 0;
      String customerInfo = "";

      System.out.println();
      System.out.println(
          "---------------------------------------\n\n" +
          "USE THE SQL STATEMENT:\n" +
          "  DELETE\n" +
          "TO PERFORM A DELETE OF ROWS WITH XML DATA.");

      // display the content of the 'customer' table
      // CustomerTbContentDisplay(1008);

      System.out.println();
      System.out.println("  Perform:\n" +
                       " DELETE FROM customer\n" +
                       " WHERE cid=1008\n" +
                       "\n");
      #sql {
         DELETE FROM customer
         WHERE cid=1008};

      // display the content of the 'customer' table
      CustomerTbContentDisplay(1008);
    }
    catch (SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // DeleteofRowwithXmlData

} //XmlUpdel
