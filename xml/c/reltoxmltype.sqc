/****************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SOURCE FILE NAME: reltoxmltype.sqc
**
** SAMPLE: Purchase order database uses relational tables to store the orders of 
**         different customers. This data can be returned as an XML object to the 
**         application. The XML object can be created using the XML constructor 
**         functions on the server side. 
**         To achieve this, the user can
**            1. Create new tables having XML columns. (Done in set up script).
**            2. Change the relational data to XML type using constructor functions.
**            3. Insert the data in new tables
**            4. Use the query to select all PO data.
**
** PREREQUISITE:
**         The relational tables that store the purchase order data will have to 
**	   be created before this sample is executed. For this the file  
**         setupscript.db2 will have to be run using the command
**	      db2 -tvf setupscript.db2
**
**         Please make sure that you run the cleanup script after running the 
**         sample using following command
**            db2 -tvf cleanupscript.db2
**
** SQL STATEMENT USED:
**         CREATE
**         SELECT
**	   INSERT
**	   	
** OUTPUT FILE: reltoxmltype.out (available in the online documentation)
**
** For more information about the sample programs, see the README file.
**
** For more information about SQL, see the "SQL Reference".
**
** For more information on DB2 APIs, see the Administrative API Reference.
**
** For the latest information on programming, compiling, and running DB2 
** applications, refer to the DB2 application development website at 
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
  short custid;
  short ponum;
  char orderdate[11];
  SQL TYPE IS XML AS CLOB(1K) purchaseorder;
  SQL TYPE IS XML AS CLOB(1K) address;
  SQL TYPE IS XML AS CLOB(1K) lineitem;
  short purchaseorder_ind;
  short address_ind;
  short lineitem_ind;

EXEC SQL END DECLARE SECTION;

int main(int argc, char *argv[])
{
  int rc = 0;
  int charNb;
  int lineNb;
  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];

  /* check the command line arguments */
  rc = CmdLineArgsCheck1(argc, argv, dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }
  
  /* connect to database */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }
  
  /* Insert data from the relational table into the XML tables. */
  EXEC SQL INSERT INTO Customerinfo_New (Custid, Address) 
    (SELECT Custid, 
    XMLDOCUMENT( 
    XMLELEMENT(NAME "Address",
    XMLELEMENT(NAME "Name", c.Name),
    XMLELEMENT(NAME "Street", c.Street),
    XMLELEMENT(NAME "City", c.City),
    XMLELEMENT(NAME "Province", c.Province),
    XMLELEMENT(NAME "PostalCode", c.PostalCode)))
    FROM CustomerInfo_relational AS C);
  EMB_SQL_CHECK("Insert into -- Customerinfo_New");
  
  /* Insert data from the relational table into the XML tables. */
  EXEC SQL INSERT INTO purchaseorder_new(PoNum, OrderDate, CustID, Status, LineItems) 
    (SELECT Po.PoNum, OrderDate, CustID, Status, 
    XMLDOCUMENT(
    XMLELEMENT(NAME "itemlist", 
    XMLELEMENT(NAME "PartID", l.ProdID),  
    XMLELEMENT(NAME "Description", p.Description ), 
    XMLELEMENT(NAME "Quantity", l.Quantity),
    XMLELEMENT(NAME "Price", p.Price)))        
    FROM purchaseorder_relational AS po, lineitem_relational AS l, 
         products_relational AS P 
    WHERE l.PoNum=po.PoNum AND l.ProdID=P.ProdID);
  EMB_SQL_CHECK("Insert into -- PurchaseOrder_new");

  /* Select the Purchase order. Declare a cursor*/
  EXEC SQL DECLARE c1 CURSOR FOR SELECT po.PoNum, po.CustId, po.OrderDate,
    XMLELEMENT(NAME "PurchaseOrder",
    XMLATTRIBUTES(po.CustID AS "CustID", po.PoNum AS "PoNum",
                  po.OrderDate AS "OrderDate", po.Status AS "Status")),
    XMLELEMENT(NAME "Address", c.Address),
    XMLELEMENT(NAME "lineitems", po.LineItems)
    FROM PurchaseOrder_new AS po, CustomerInfo_new AS c 
    WHERE  po.custid = c.custid
    ORDER BY po.custID;

  /* open cursor */
  EXEC SQL OPEN c1;
  EMB_SQL_CHECK("cursor -- open");
  
  /* fetch cursor */                                                
  EXEC SQL FETCH c1 INTO :custid, :ponum, :orderdate, :purchaseorder:purchaseorder_ind,
                                                      :address:address_ind,
						      :lineitem:lineitem_ind;
  EMB_SQL_CHECK("cursor -- fetch");
 
  /* Print the result */
  while (sqlca.sqlcode != 100)
  {
   printf("\n\ncustId = %d, Purchase Order Number = %d, Order Date = %s",custid, ponum, orderdate);
   printf("\n\n******Purchase Order Document :******\n");
   if(purchaseorder_ind >= 0)
   {
     for (charNb = 0; charNb < purchaseorder.length; charNb++)
       {
          printf("%c", purchaseorder.data[charNb]);
       }  
   }
   if(address_ind >= 0)
   {
     printf("\n\n******Address in XML format is :******\n");
     for (charNb = 0; charNb < address.length; charNb++)
        {
          printf("%c", address.data[charNb]);
        }
   }
   if(lineitem_ind >= 0)
   {
     printf("\n\n******Line Item details in XML format is :******\n");
     for (charNb = 0; charNb < lineitem.length; charNb++)
        {
          printf("%c", lineitem.data[charNb]);
        }
   } 
  /* Fetch next row */
  EXEC SQL FETCH c1 INTO :custid, :ponum, :orderdate, :purchaseorder:purchaseorder_ind,
                                                      :address:address_ind,
                                                      :lineitem:lineitem_ind;
  EMB_SQL_CHECK("cursor -- fetch");
  }

  /* close cursor */
  EXEC SQL CLOSE c1;
  EMB_SQL_CHECK("cursor -- close");

  /* disconnect from the database */
  rc = DbDisconn(dbAlias);
  if (rc != 0)
  {
    return rc;
  }

  return 0;
} /* main */

