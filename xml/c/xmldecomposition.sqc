/***************************************************************************
**   (c) Copyright IBM Corp. 2007 All rights reserved.
**   
**   The following sample of source code ("Sample") is owned by International 
**   Business Machines Corporation or one of its subsidiaries ("IBM") and is 
**   copyrighted and licensed, not sold. You may use, copy, modify, and 
**   distribute the Sample in any form without payment to IBM, for the purpose of 
**   assisting you in the development of your applications.
**   
**   The Sample code is provided to you on an "AS IS" basis, without warranty of 
**   any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
**   IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
**   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
**   not allow for the exclusion or limitation of implied warranties, so the above 
**   limitations or exclusions may not apply to you. IBM shall not be liable for 
**   any damages you suffer as a result of using, copying, modifying or 
**   distributing the Sample, even if IBM has been advised of the possibility of 
**   such damages.
** *************************************************************************
**                                                                          
** SAMPLE FILE NAME: xmldecomposition.sqc                                          
**
** PURPOSE: To demonstrate annotated XML schema decomposition  
**
** USER SCENARIO:
**             A bookstore has books for sale and the descriptive information about
**         each book is stored as an XML document. The store owner needs to store
**         these details in different relational tables with referential
**         constraints for easy retreival of data.
**         The Bookstore that has two types of customers, retail customers and
**         corporate customers. Corporate customers do bulk purchases of books
**         for their company libraries. The store has a DBA for maintaining
**         the database, the store manager runs queries on different tables
**         to view the book sales. The information about books returned by
**         customers due to damage or due to exchange with some other book
**         is stored as xml document in books_returned table. At the end of
**         the day a batch process decomposes these XML documents to update
**         the books available status with the latest information. The batch
**         process uses the DECOMPOSE XML DOCUMENTS command to decompose
**         binary or XML column data into relational tables.
**
** SOLUTION:
**         The store manager must have an annotated schema based on which the XML data
**         can be decomposed. Once a valid annotated schema for the instance document
**         is ready, it needs to be registered with the XML schema repository with
**         the decomposition option enabled. Also, the tables in which the data will be
**         decomposed must exist before the schema is registered. The user can
**         decompose the instance documents and store the data in the relational
**         tables using annotated XML Decomposition.
**
**
**  PREREQUISITE:
**        The instance documents and the annotated schema must exist in the same
**        directory as the sample.
**        Copy bookdetails.xsd, booksreturned.xsd, bookdetails.xml,
**        booksreturned.del, booksreturned1.xml, booksreturned2.xml, booksreturned3.xml,
**        setupfordecomposition.db2 and cleanupfordecomposition.db2 from directory
**        <install_path>/sqllib/samples/xml/data in UNIX and
**        <install_path>\sqllib\samples\xml\data in Windows to the working directory.
**                                                                          
**  EXECUTION:    i)   db2 -tvf setupfordecomposition.db2 (setup script
**                     to create the required tables.
**                ii)  bldapp xmldecomposition (Build the sample)
**                iii) xmldecomposition (Run the sample)
**                iv)  db2 -tvf cleanupfordecomposition.db2 (clean up
**                     script to drop all the objects created)
**
**  INPUTS:       NONE
**
**  OUTPUTS:      Decomposition of XML document according to the dependencies
**                specified in the annotated XML schema.
**
**  OUTPUT FILE:  xmldecomposition.out (available in the online documentation)
**
**  SQL STATEMENTS USED:
**        REGISTER XMLSCHEMA
**        COMPLETE XMLSCHEMA
**        DECOMPOSE XML DOCUMENT
**        CREATE
**        SELECT
**        DROP
**
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************
**
**  SAMPLE DESCRIPTION
**
** *************************************************************************
** 1. Register the annotated XML schema.
** 2. Decompose the XML documents using the registered XML schema.
** 3. Select data from the relational tables to see decomposed data.
** *************************************************************************/

/* **************************************************************************
**    SETUP ** execute setupfordecomposition.db2
** **************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"

EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
  char RelSchema[1024];
  char SchemaName[1024];
  char SchemaLocation[1024];
  char PrimaryDocument[1024];
  char xmlfilename[1024];
  char documentid[1024];
  short shred = 1;
  short validation = 1;
  short isRelSchemaNULL = 0;
  short isXMLSchemaNULL = 0;
  short isDocumentIDNULL = 0;
  short isXMLFileNULL = 0;
  short isValidationNULL = 0;
  short isReserveBLOB1NULL = -1;
  short isReserveBLOB2NULL = -1;
  short isReserveIntNULL = -1;
  SQL TYPE IS BLOB_FILE xsdfile;
  SQL TYPE IS BLOB_FILE addfile;
  SQL TYPE IS BLOB_FILE xmlfile;
  short in_ind = 0;
  short null_ind = -1;
  SQL TYPE is BLOB(1M) *xsdobjp = NULL;
  SQL TYPE is BLOB(1M) *addobjp = NULL;
  SQL TYPE is BLOB(2M) *xmlobjp = NULL;
  char isbn[15];
  short chptnum;
  char chpttittle[50];
  char chptcontent[1000];
  short authid;
  char book_title[50];
  char authname[50];
  short no_of_copies=0;
  float price=0;
  char status[1];
  char decomposition[1];
  char decomposition_version[5];
  char query[2000];
  SQL TYPE is CLOB(2000) *hquery = NULL;
  short hquery_ind = 0;
  short validate_ind = 0;
  short commitcount_ind = 0;
  short allowaccess_ind = 0;
  short continueonerror_ind = 0;
  short totalDoc_ind=-1, totalDecomp_ind=-1, errorReport_ind=-1;
  sqlint32 validate;
  sqlint32 commitcount;
  sqlint32 allowaccess;
  sqlint32 totalDoc, totalDecomp;
  short continueonerror;
  SQL TYPE is BLOB(500K) *errorReport = NULL;
  SQL TYPE is BLOB(64) reservedBLOB;
EXEC SQL END DECLARE SECTION;

int selectfromalltables(void);
int selectfrombooksavail(void);

int main(int argc, char *argv[])
{
  int rc = 0;
  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];
  FILE *testfile;

  /* check the command line arguments */
  rc = CmdLineArgsCheck1(argc, argv, dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }

  /* connect to database */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }
 
  errorReport = (struct errorReport_t *) malloc (5000);

  printf("\nTHIS SAMPLE SHOWS HOW TO DECOMPOSE XML DATA \n");
 
  /* Register the schema bookdetailss*/
  printf("\n/*************************************************************************");
  printf("\n Register the XML schema bookdetails");
  printf("\n*************************************************************************/");
  strcpy((char *)RelSchema, "xdb");
  strcpy((char *)SchemaName,"bookdetails");
  strcpy((char *)SchemaLocation, "http://bookdetailsschema.com/bookdetails.xsd");
  strcpy((char *)PrimaryDocument,"bookdetails.xsd");
  strcpy((char *)xmlfilename, "bookdetails.xml");
  strcpy((char *)documentid, "bookdetails001");
  rc = registerxmlschema();

  /* Decompose a single XML document */
  printf("\n/*************************************************************************");
  printf("\n Decompose a single XML document using the registered XML schema.");
  printf("\n*************************************************************************/");
  rc = singlexmldecompose();

  /* Register the schema booksreturned*/
  printf("\n/*************************************************************************");
  printf("\n Register the XML schema booksreturned");
  printf("\n*************************************************************************/"); 
  strcpy((char *)RelSchema, "xdb");
  strcpy((char *)SchemaName,"booksreturned");
  strcpy((char *)SchemaLocation, "http://bookdetailsschema.com/booksreturned.xsd");
  strcpy((char *)PrimaryDocument,"booksreturned.xsd");
  rc = registerxmlschema();

  printf("\n/*************************************************************************");
  printf("\n Decompose XML documents from an XML column.");
  printf("\n*************************************************************************/");   
  strcpy(query,"SELECT customerID, booksreturned FROM xdb.books_returned");
  hquery = (struct hquery_t *) malloc (strlen(query)+100);
  hquery->length = strlen (query);
  strcpy (hquery->data, query);
  rc = bulkxmldecompose();
  free(hquery);

  printf("\n/*************************************************************************");
  printf("\n Decompose XML documents from a BLOB column.");
  printf("\n*************************************************************************/");
  strcpy(query,"SELECT supplierID, booksinfo from xdb.books_received_BLOB");
  hquery = (struct hquery_t *) malloc (strlen(query)+100);
  hquery->length = strlen (query);
  strcpy (hquery->data, query);
  rc = bulkxmldecompose();
  free(hquery);

  printf("\n/*************************************************************************");
  printf("\n Decompose XML documents from an XML column resulted by Join operation.");
  printf("\n*************************************************************************/");
  strcpy(query,"SELECT id, data FROM( SELECT br.customerID as id, br.booksreturned AS info FROM xdb.books_returned as br,xdb.books_received as bc WHERE XMLEXISTS('$bi/books/book[@isbn] = $bid/books/book[@isbn]' PASSING br.booksreturned as \"bi\", bc.booksinfo as \"bid\")) AS temp(id,data) ");   
  hquery = (struct hquery_t *) malloc (strlen(query)+100);
  hquery->length = strlen (query);
  strcpy (hquery->data, query);
  rc = bulkxmldecompose();
  free(hquery);

  printf("\n/*************************************************************************");
  printf("\n Decompose XML documents from an XML column resulted by union operation.");
  printf("\n*************************************************************************/");
  strcpy(query,"SELECT id, data FROM(SELECT customerID as cid, booksreturned AS info FROM xdb.books_returned WHERE XMLEXISTS('$bk/books/book[author=\"Carl\"]' PASSING booksreturned AS \"bk\") UNION ALL SELECT supplierID as sid, booksinfo AS books FROM xdb.books_received WHERE XMLEXISTS('$br/books/book[author=\"Carl\"]' PASSING booksinfo AS \"br\")) AS temp(id,data)");
  hquery = (struct hquery_t *) malloc (strlen(query)+100);
  hquery->length = strlen (query);
  strcpy (hquery->data, query);
  rc = bulkxmldecompose();
  free(hquery);

  /* Reset connection to DB */
  EXEC SQL CONNECT RESET;
  EMB_SQL_CHECK("Connect Reset");

  free(errorReport);
  return 0;
}

int selectfromalltables(void)
{
  int rc = 0;
  struct sqlca sqlca;

  printf("\n  Executing:\n");
  printf("-------------------------------------------------------------------------------\n");
  printf("    SELECT ISBN, chptnum, chpttitle, chptcontent FROM XDB.BOOK_CONTENTS\n");
  printf("\n  Results:\n");
  printf("-------------------------------------------------------------------------------\n");
  /* declare cursor */
  EXEC SQL DECLARE c0 CURSOR FOR SELECT isbn, chptnum, chpttitle, chptcontent
                                   FROM XDB.BOOK_CONTENTS;
  /* open cursor */
  EXEC SQL OPEN c0;
  EMB_SQL_CHECK("cursor -- open");

  /* fetch cursor */
  EXEC SQL FETCH c0 INTO :isbn, :chptnum, :chpttittle, :chptcontent;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("ISBN            : %s\n", isbn);    
    printf("CHAPTER NUMBER  : %d\n", chptnum);
    printf("CHAPTER TITLE   : %s\n", chpttittle);
    printf("CHAPTER CONTENT : %s\n", chptcontent);

    EXEC SQL FETCH c0 INTO :isbn, :chptnum, :chpttittle, :chptcontent;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  /* close cursor */
  EXEC SQL CLOSE c0;
  EMB_SQL_CHECK("cursor -- close");
 
  printf("\n-------------------------------------------------------------------------------\n");

  /* Select from Second table */
  printf("\n  Executing:\n");
  printf("-------------------------------------------------------------------------------\n");
  printf("    SELECT authid, isbn, book_title FROM ADMIN.BOOK_AUTHOR WHERE authid=532\n");
  printf("\n  Results:\n");
  printf("-------------------------------------------------------------------------------\n");
  /* declare cursor */
  EXEC SQL DECLARE c1 CURSOR FOR SELECT authid, isbn, book_title 
  			           FROM ADMIN.BOOK_AUTHOR WHERE authid=532;
  /* open cursor */
  EXEC SQL OPEN c1;
  EMB_SQL_CHECK("cursor -- open");

  /* fetch cursor */
  EXEC SQL FETCH c1 INTO :authid, :isbn, :book_title;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("AUTHID          : %d\n", authid);
    printf("ISBN            : %s\n", isbn);
    printf("BOOK TITLE      : %s\n", chpttittle);

    EXEC SQL FETCH c1 INTO :authid, :isbn, :book_title;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  /* close cursor */
  EXEC SQL CLOSE c1;
  EMB_SQL_CHECK("cursor -- close");

  printf("\n-------------------------------------------------------------------------------\n");
  selectfrombooksavail();

  return 0;
} /* selectfromalltables */


int selectfrombooksavail(void)
{

  int rc = 0;
  struct sqlca sqlca;

  printf("\n  Executing:\n");
  printf("-------------------------------------------------------------------------------\n");
  printf(" SELECT isbn, book_title, authid, authname, price, no_of_copies FROM XDB.BOOKS_AVAIL\n");
  printf("\n  Results:\n");
  printf("-------------------------------------------------------------------------------\n");
  /* declare cursor */
  EXEC SQL DECLARE c11 CURSOR FOR SELECT isbn, book_title, authid, authname, price, no_of_copies FROM XDB.BOOKS_AVAIL;
  /* open cursor */
  EXEC SQL OPEN c11;
  EMB_SQL_CHECK("cursor -- open");

  /* fetch cursor */
  EXEC SQL FETCH c11 INTO :isbn, :book_title, :authid, :authname, :price, :no_of_copies;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("\nISBN         : %s\n", isbn);    
    printf("BOOK TITLE   : %s\n", book_title);
    printf("AUTHOR ID    : %d\n", authid);
    printf("AUTHOR NAME  : %s\n", authname);
    printf("PRICE        : %f\n", price);
    printf("NO OF COPIES : %d\n", no_of_copies);

    EXEC SQL FETCH c11 INTO :isbn, :book_title, :authid, :authname, :price, :no_of_copies;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  /* close cursor */
  EXEC SQL CLOSE c11;
  EMB_SQL_CHECK("cursor -- close");

  printf("\n-------------------------------------------------------------------------------\n");
  EXEC SQL DELETE FROM XDB.BOOKS_AVAIL;
  EMB_SQL_CHECK("delete ");

return 0;

} /* selectfrombooksavail */ 

int registerxmlschema()
{
  struct sqlca sqlca;
  FILE *testfile;

  short isshred=1; 
  strcpy(xsdfile.name, PrimaryDocument);
  xsdfile.name_length = strlen(xsdfile.name);
  xsdfile.file_options = SQL_FILE_READ;
 
  /* read the BLOB file into a BLOB variable */ 
  if (xsdfile.name_length > 0)
    {
      testfile = fopen( xsdfile.name, "r" );
      if ( testfile != NULL )
        {
          fclose( testfile );
          if ((xsdobjp = (struct xsdobjp_t *)
                                     malloc (sizeof (*xsdobjp))) != NULL )
            {
               memset(xsdobjp, 0, sizeof(*xsdobjp));
               EXEC SQL VALUES (:xsdfile) INTO :*xsdobjp;
            }
        }
      else
        {
           printf("fopen() error.\n");
           printf("Error accessing file: %s \n", xsdfile.name);
           exit(0);
        }
    }

  
  printf("\nCALLING SYSPROC.XSR_REGISTER TO REGISTER THE SCHEMA %s......\n\n",SchemaName);
  
  /* call SYSPROC.XSR_REGISTER to register the primary schema */ 
  EXEC SQL CALL SYSPROC.XSR_REGISTER (:RelSchema:in_ind,
                                      :SchemaName:in_ind,
                                      :SchemaLocation:in_ind,
                                      :*xsdobjp:in_ind,
                                      :*xsdobjp:null_ind );
  EMB_SQL_CHECK("CALLING SYSPROC.XSR_REGISTER"); 
 
 
  /* call SYSPROC.XSR_COMPLETE the complete the registeration of the schema */ 
  printf("\n----------------------------------------------------------------\n");
  printf("CALLING  SYSPROC.XSR_COMPLETE TO COMPLETE THE SCHEMA REGISTERATION.....\n\n");
  EXEC SQL CALL SYSPROC.XSR_COMPLETE (:RelSchema:in_ind,
                                      :SchemaName:in_ind,
                                      :*xsdobjp:null_ind,
                                     :shred);
  EMB_SQL_CHECK("CALLING SYSPROC.XSR_COMPLETE");
  EXEC SQL COMMIT;
  
  /*Check catalog tables for information regarding registered schema. */
  EXEC SQL DECLARE c2 cursor FOR SELECT status, decomposition, decomposition_version                           FROM SYSIBM.SYSXSROBJECTS WHERE XSROBJECTNAME IN ('BOOKDETAILS', 'BOOKSRETURNED');
 
   /* open cursor */
  EXEC SQL OPEN c2;
  EMB_SQL_CHECK("cursor -- open");

  /* fetch cursor */
  EXEC SQL FETCH c2 INTO :status, :decomposition, :decomposition_version;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("STATUS                 : %s\n", status);
    printf("DECOMPOSITION ENABLED  : %s\n", decomposition);
    printf("DECOMPOSITION VERSION  : %s\n", decomposition_version);

    EXEC SQL FETCH c2 INTO :status, :decomposition, :decomposition_version; 
    EMB_SQL_CHECK("cursor -- fetch");
  }

  /* close cursor */
  EXEC SQL CLOSE c2;
  EMB_SQL_CHECK("cursor -- close"); 
  
  /* Perform Commit to save changes */
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("COMMIT");
  
  return 0;
} /* registerxmlschema */ 

int singlexmldecompose()
{

FILE *testfile;
 
	/* Decompose the XML document */
  if (strcmp(xmlfilename, "NULL") == 0)
    {
      isXMLFileNULL = -1;
    }
  else
    {
      strcpy(xmlfile.name, xmlfilename);
      xmlfile.name_length = strlen(xmlfile.name);
      xmlfile.file_options = SQL_FILE_READ;
      if (xmlfile.name_length > 0) 
        {
          testfile = fopen( xmlfile.name, "r" );
          if ( testfile != NULL )
            {
              fclose( testfile );
              if ((xmlobjp = (struct xmlobjp_t *)
                                       malloc (sizeof (*xmlobjp))) != NULL )
                {
                   memset(xmlobjp, 0, sizeof(*xmlobjp)); 
                   EXEC SQL VALUES (:xmlfile) INTO :*xmlobjp;
                }
            }/* file opened*/
          else 
            {
              printf("fopen() error.\n");
              printf("Error accessing file: %s \n", xmlfile.name);
              exit(0);
            }
        } /* xmlfile.name_length>0 */
      } 

    EXEC SQL CALL SYSPROC.XDBDECOMPXML (:RelSchema,
                                        :SchemaName,
                                        :*xmlobjp,
                                        :documentid,
                                        :validation:isValidationNULL,
                                        :*xmlobjp:isReserveBLOB1NULL,
                                        :*xmlobjp:isReserveBLOB2NULL,
                                        :validation:isReserveIntNULL);
 
    EMB_SQL_CHECK("CALL SYSPROC.XDBDECOMPXML");
    
    /* Select from tables to check if decomposition was successfull */
    selectfromalltables();
}



int bulkxmldecompose()
{

  int rc = 0;
  validate = 1;
  commitcount = 0;
  allowaccess = 0;
  continueonerror = 0;

  printf("\n %s",hquery->data); 
  /* Call the stored procedure. */
  printf("\n Calling SYSPROC.XDB_DECOMP_XML_FROM_QUERY...\n"); 
  EXEC SQL CALL SYSPROC.XDB_DECOMP_XML_FROM_QUERY
                                    (:RelSchema:in_ind,
                                     :SchemaName:in_ind,
                                     :*hquery:hquery_ind,
                                     :validate:validate_ind,
                                     :commitcount:commitcount_ind,
                                     :allowaccess:allowaccess_ind,
                                     :reservedBLOB:null_ind,
                                     :reservedBLOB:null_ind,
                                     :continueonerror:continueonerror_ind,
                                     :totalDoc:totalDoc_ind,
                                     :totalDecomp:totalDecomp_ind,
                                     :*errorReport:errorReport_ind
                                     );
  EMB_SQL_CHECK("CALL SYSPROC.SYSPROC.XDB_DECOMP_XML_FROM_QUERY");
  EXEC SQL COMMIT;

  if (totalDoc_ind != -1) 
	printf ("Total XML documents = %d\n", totalDoc); 
  if (totalDecomp_ind != -1)
	printf ("Total XML documents decomposed = %d\n", totalDecomp); 
  if (errorReport_ind == -1)
  {
        printf ("error report length = %d\n", errorReport->length);
        printf ("error report = %s\n", errorReport->data);
  }

  /* Select from BOOKS_AVAIL table to check if decomposition was successfull */
  selectfrombooksavail();

}
