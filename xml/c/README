******************************************************************************
* (c) Copyright IBM Corp. 2007 All rights reserved.
* 
* The following sample of source code ("Sample") is owned by International 
* Business Machines Corporation or one of its subsidiaries ("IBM") and is 
* copyrighted and licensed, not sold. You may use, copy, modify, and 
* distribute the Sample in any form without payment to IBM, for the purpose of 
* assisting you in the development of your applications.
* 
* The Sample code is provided to you on an "AS IS" basis, without warranty of 
* any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
* IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
* not allow for the exclusion or limitation of implied warranties, so the above 
* limitations or exclusions may not apply to you. IBM shall not be liable for 
* any damages you suffer as a result of using, copying, modifying or 
* distributing the Sample, even if IBM has been advised of the possibility of 
* such damages.
*
******************************************************************************
*
*                    README for C XML Samples
*
* The "<install_path>/sqllib/samples/xml/c" directory on Unix and
* "<install_path>\sqllib\samples\xml\c" directory on Windows
* contain this README file where <install_path> is the location of DB2 9.7
* on your hard drive.
* The default location for <install_path> is
*                 C:\Program Files\IBM on Windows.
* The default location for <install_path> is
*                $HOME on Unix.
*
* This README describes how to build and run C XML sample code for DB2 9.7.
* DB2 9.7 sample code and build files for C XML are located in the following
* directory:
*       <install_path>\sqllib\samples\xml\c on Windows and
*       <install_path>/sqllib/samples/xml/c on Unix
*
* It is recommended that you copy the sample files from this directory
* to a working directory prior to building  the sample programs.
* The sample program directories are typically read-only on most
* platforms and some samples produce output files that require write
* perimssions on the directory.
*
* WARNING: Some of these samples may change your database or database manager
*          configuration.  Execute the samples against a test database
*          only, such as the DB2 SAMPLE database.
*
******************************************************************************
*
*        Prepare your DB2 sample development environment for Windows/Unix
*
*   1) Copy the files in <install_path>\sqllib\samples\xm\c\* for Windows and
*        $HOME/sqllib/samples/xml/c/* for Unix to a working directory and
*        ensure that directory has write permission.
*
*   2) On Windows platform, all samples should be run and built in DB2
*      Command Window.
*      The DB2 command window is needed to execute the db2 specific commands.
*      You can follow the step below to open DB2 command window.
*      From the Start Menu click Start --> Programs --> IBM DB2 -->
*      <DB2 copy name> --> Command Line Tools --> Command Window.
*
*   3) Start the database manager with the following command:
*      db2start
*
*   4) Create the sample database with the following command:
*      db2sampl -xml
*
*   5) Connect to the sample database with the following command:
*      db2 connect to sample
*
*   6) To build stored procedures and User defined functions,
*      ensure that you have write permission on the
*      <install_path>\sqllib\function directory on Windows and
*      <install_path>/sqllib/function directory on Unix.
*
*   7) Change directory (CD) to the directory containing the files
*      copied in step 1.
*
******************************************************************************
*
*                        Building DB2 samples
*
*  There are two ways to build DB2 samples: using a nmake utility for
*  windows (make utility for Unix)  or using build scripts that
*  are  included with DB2 sample programs.
*
*        o To build samples using the nmake utility for windows see
*          'BUILDING SAMPLES USING nmake UTILITY on Windows'.
*        o To build samples using the make utility for unix see
*          'BUILDING SAMPLES USING make UTILITY on Unix'.
*        o To build samples using the build scripts or when you
*          don't have a compatible make/namke utility,
*          see 'BUILDING SAMPLES USING BUILD SCRIPTS'.
*
* NOTE :
*
*    1. Some of the samples might need one or more data files at runtime.
*       some of the samples may also need setup script to be run before
*       running the sample.See the specific sample descriptions in
*       "File Descriptions" section for more details.
*
*    2. There are utility files available in this directory that are used
*       by these samples for error checking. Please make sure that these
*       files are present in you working directory. The information
*       about these files can be found in "File Descriptions" section of
*       this README.
*
*    3. Refer to the "File Descriptions" section in this README for
*       information on specific samples and any special considerations
*       relevant for each. The HEADER sections of these samples also
*       provide further details on each sample.
*
******************************************************************************
*
*      *** BUILDING SAMPLES USING nmake UTILITY ON Windows ***
*
*  If you have a compatible nmake utility on your system, you can use
*  the makefile provided. Such a nmake utility may be provided by
*  another language compiler.If Windows, modify the PATH variable
*  to include the directory containing the nmake utility.
*
*  Depending on your environment, the makefile might have to be
*  modified.For more details refer to the 'VARIABLES' section
*  in the makefile.
*
*  Execute the appropriate 'nmake' command in your working
*  directory:
*
*   nmake <app_name>        - Builds the program designated by <app_name>.
*
*   nmake all               - Builds all supplied sample programs
*
*   nmake srv               - Builds sample that can only be run on the server
*                             (stored procedure)
*
*   nmake all_client        - Builds all client samples (all programs in the
*                            'call_rtn' and 'client_run' categories).
*
*   nmake call_rtn          - Builds client programs that call stored
*                             procedure
*
*   nmake client_run        - Builds all programs that run completely on the
*                            client (not ones that call stored procedure)
*
*   nmake clean             - Erases all intermediate files produced in the
*                            build process.
*
*   nmake cleanall          - Erases all files produced in the build process
*                            (all files except the original source files).
*
******************************************************************************
*
*        *** BUILDING SAMPLES USING make UTILITY ON Unix ***
*
*      If you have a compatible make utility on your system, you
*      can use the makefile provided. Modify the PATH
*      variable to include the directory containing the make
*      utility.
*
*      Depending on your environment, the makefile might have to be
*      modified.For more details refer to the 'VARIABLES' section
*      in the makefile.
*
*   Execute the appropriate 'make' command in your working directory:
*   make <app_name>        - Builds the program designated by <app_name>.
*
*   make all               - Builds all supplied sample programs
*
*   make srv               - Builds sample that can only be run on the server
*                            (stored procedure)
*
*   make all_client        - Builds all client samples (all programs in the
*                            'call_rtn' and 'client_run' categories).
*
*   make call_rtn          - Builds client programs that call stored procedure
*
*   make client_run        - Builds all programs that run completely on the
*                            client (not ones that call stored procedure)
*
*   make clean             - Erases all intermediate files produced in the
*                            build process.
*
*   make cleanall          - Erases all files produced in the build process
*                            (all files except the original source files).
*
******************************************************************************
*
*       *** BUILDING SAMPLES USING BUILD SCRIPTS ***
*
*  As an alternative  to the makefile , the build scripts included
*  with the DB2 samples can be used to build the C XML sample programs.
*
* Building Standalone Samples:
*       o bldapp     <prog_name>
*                    <prog_name> - the name of the sample program without any
*                    extension.
*         For any additional dependencies refer to the individual sample.
*
* Building and Executing Stored Procedures:
*       o Build stored procedure server and copy the resulting binary file to
*         the sqllib/function directory with the following command:
*         bldrtn     <prog_name>
*                    <prog_name> - Name of the sample program without any
*                    extension.
*       o Catalog stored procedures with the following command:
*         spcat
*       o Build stored procedure client with the following command:
*         bldapp     <prog_name>
*                    <prog_name> - Name of the sample program without any
*                    extension.
*
*  For any additional dependencies refer to individual samples.
*
******************************************************************************
*
*              Common file Descriptions
* 
* The following are the common files for C XML samples. For more
* information on these files, refer to the program source files.
*
*******************************************************************************
*
* Common files
*
* README        - this file
* makefile      - makefile for all files.
*
******************************************************************************
*
* Common Utility Function files
*
* utilapi.c     - Error-checking utility file for DB2 API programs.
* utilapi.h     - Header file for utilapi.c.
* utilemb.sqc   - Error-checking utility file for embedded SQL programs.
* utilemb.h     - Header file for utilemb.sqc.
*
*****************************************************************************
*
* Batch files(for Windows) and Shell Scripts(for Unix)
*
* bldapp        - Builds an application program.
* bldrtn        - Builds a routine (stored procedure and UDF) program.
* embprep       - Precompiles and binds embedded SQL programs.
*
*
******************************************************************************
*
*                   C XML sample descriptions
*
* The following are the C XML sample files included with DB2.For more
* information on these files, refer to program source files.
*
*
******************************************************************************
*
*                          C XML samples description
*
* Sample Files
*
* xmlschema.sqc        - How to register an XML schema to a database using
*                        stored procedures. How to use this registered schema
*                        to validate an XML value before inserting into
*                        a table.
*                        PREREQUISITE: copy product.xsd, order.xsd,
*                        customer.xsd, header.xsd Schema files, order.xml XML
*                        document from xml/data directory to working
*                        directory.
*
* reltoxmltype.sqc     - How to create XML object from data stored in
*                        relational tables using various SQL/XML Constructor
*                        functions.
*                        PREREQUISITE: Run the cleanup.db2 and setupscript.db2
*                        scripts before running this simple.
*                        Run the cleanupscript.db2 script to cleanup the
*                        database objects after running the sample.
*                        These scripts can be found in xml/data directory.
*
* xmlread.sqc          - How to read XML data stored in tables.
*
* xmlinsert.sqc        - How to insert XML data into tables having an XML
*                        column.
*
* xmlupdel.sqc         - How to update and delete XML documents in tables.
*
* xmldecomposition.sqc - How to decompose data stored in a XML file and
*                        insert those into relational tables with constraints.
*                        PREREQUISITE: run the script setupfordecomposition.db2
*                        before running the sample. Run the script
*                        cleanupfordecomposition.db2 after running the sample
*                        to cleanup the object created for the samples. These
*                        scripts can be found in xml/data directory. This
*                        sample require bookdetails.xsd, booksreturned.xsd, bookdetails.xml,
*                        booksreturned.del, booksreturned1.xml, booksreturned2.xml, 
*                        booksreturned3.xml files at run time. Copy these files to your 
*                        working directory before running the sample. These files can
*                        be found in xml/data directory.
*
* recxmldecomp.sqc     - How to register a recursive XML schema to the XSR and
*                        enable the same for decomposition.
*                        PREREQUISITE: The instance document and the annotated
*                        schema should exist in the same directory as the sample.
*                        Copy recemp.xml, recemp.xsd from directory
*                        <install_path>/sqllib/samples/xml/data in UNIX and
*                        <install_path>\sqllib\samples\xml\data in Windows to the
*                        working directory.
*
* xmlload.sqc          - How to load XML data into an XML column using LOAD.
*                        PREREQUISITE: The data files and XML documents must exist
*                        in the DB2 install path. Copy loaddata1.del
*                        and loaddata2.del from directory xml/data in UNIX and
*                        xml\data in Windows to the DB2 install path.
*                        Create a new directory "xmldatadir" in the install path 
*                        and copy loadfile1.xml and loadfile2.xml from directory
*                        xml/data in UNIX and xml\data in Windows to the newly
*                        created xmldatadir directory.
*
* lobstoxml.sqc        - How to move XML data stored as LOB to XML column
*                        using IMPORT/EXPORT.
*                        PREREQUISITE: create a directory lobdatadir in db2
*                        home directory to store the data files created during
*                        the execution of the sample.
*
* impexpxml.sqc        - How to move table data of XML data type using IMPORT
*                        and EXPORT.
*                        PREREQUISITE: copy xmldata.del in db2 home directory.
*                        xmldata.del can be found in xml/data directory
*                        create a directory xmldatadir in db2 home
*                        directory and copy the file xmlfiles.001.xml to
*                        this directory.
*
* xmlrunstats.sqc      - How to perform runstats on a table with XML type
*                        columns.
*
* xmlindex.sqc         - How to create index on an XML column.
*
* xmlconst.sqc         - How to put constraints on an XML column.
*                        NOTE : This sample demonstrate the how to enforce the
*                        constraints on an XML value. There are some statement
*                        in the samples which are expected to fail because of
*                        constraint violation so The sql error SQL803N,
*                        SQL20305N and SQL20306N are expected.
*
* xmltrig.sqc          - How to automate validation for XML documents while
*                        insertion or updation using XML triggers.
*                        PREREQUISITE: boots.xsd schema must be copied
*                        from <install_path>/xml/data to the current
*                        working directory from where the sample will
*                        be executed.
*
* xmlintegrate.sqc     - How to use XMLROW and XMLGROUP functions to publish
*                        relational information as XML.
*                        To show XMLQuery default passing mechanism.
*                        To show default column specification for XMLTABLE.
*
* xmlxslt.sqc          - How to convert XML document from one form to another
*                        using XSL stylesheets
*
* xmlcheckconstraint.sqc
*                      - How to create check constraint on XML column validating
*                        XML document against single or multiple schemas.
*                        PREREQUISITE: boots.xsd and musicplayer.xsd schemas
*                        must be copied from <install_path>/xml/data to the
*                        current working directory from where the sample will
*                        be executed.
*
* xmludfs.sqc          - How XML data type is supported in Scalar UDFs, Sourced
*                        UDFs and SQL bodied UDFs.
******************************************************************************
*
* Stored Procedures (program files that demonstrate stored procedures)
*
* simple_xmlproc_client.db2  - Client application that calls the stored
*                              procedure in simple_xmlproc.sqc.
*                              PREREQUISITE: Build the server
*                              "simple_xmlproc.sqc"
*                              and register the procedure using spcat_xml.
*                              For more information, See the Samples header.
*
* simple_xmlproc.sqc         - Stored procedure function built and run on
*                              the server
*
* spcat_xml                  - This file is a shell script on Unix  and
*                              batch file on windows which  first calls
*                              simple_xmlproc_drop.db2
*                              and then calls simple_xmlproc_create.db2.
*
* simple_xmlproc_create.db2  - CLP script to issue CREATE PROCEDURE
*                              statement
*
* simple_xmlproc_drop.db2    - CLP script to drop stored procedure from
*                              the catalog
*
* simple_xmlproc.exp         - export file for simple_xmlproc.
*
******************************************************************************
