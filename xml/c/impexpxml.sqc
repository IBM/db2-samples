/****************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SOURCE FILE NAME: impexpxml.sqc
**
** SAMPLE: How to move XML data using IMPORT and EXPORT with new options
**
** PREREQUISITES:
**       Note: All the data files are at sqllib/xml/data directory.
**       1. Copy xmldata.del to the DB2 home directory
**       2. Create a directory "xmldatadir" in DB2 home directory and copy
**          "xmlfiles.001.xml" to the "xmldatadir" directory
**
** DB2 APIs USED:
**         db2Export -- Export
**         db2Import -- Import
**
** SQL STATEMENTS USED:
**         PREPARE
**         DECLARE CURSOR
**         OPEN
**         FETCH
**         CLOSE
**         CREATE TABLE
**         INSERT INTO
**         DROP
**
** OUTPUT FILE: impexpxml.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For information on DB2 APIs, see the Administrative API Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include <db2ApiDf.h>
#include "utilemb.h"

int DataExport(char *);
int TbImport(char *);

/* support functions */
int ExportedDataDisplay(char *);
int ImportedDataDisplay(void);

EXEC SQL BEGIN DECLARE SECTION;
  char strStmt[256];
  short cid;
  SQL TYPE IS XML AS CLOB(50K) info;
EXEC SQL END DECLARE SECTION;

int main(int argc, char *argv[])
{
  int rc = 0;
  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];
  char impDataFileName[256];

  /* check the command line arguments */
  rc = CmdLineArgsCheck1(argc, argv, dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }

  printf("\nTHIS SAMPLE SHOWS HOW TO MOVE XML DATA USING EXPORT & IMPORT.\n");

  /* connect to database */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }
  
  #if(defined(DB2NT))
  sprintf(impDataFileName, "%s%sxmldata.del", getenv("DB2PATH"), PATH_SEP);
  #else /* UNIX */
  sprintf(impDataFileName, "%s%sxmldata.del", getenv("HOME"), PATH_SEP);
  #endif

  rc = TbImport(impDataFileName);
 
  /* disconnect from the database */
  rc = DbDisconn(dbAlias);
  if (rc != 0)
  {
    return rc;
  }

  return 0;
} /* main */

int ExportedDataDisplay(char *dataFileName)
{
  struct sqlca sqlca = {0};
  FILE *fp;
  char buffer[100];
  int maxChars = 100;
  int numChars;
  int charNb;

  fp = fopen(dataFileName, "r");
  if (fp == NULL)
  {
    return 1;
  }

  printf("\n  The content of the file '%s' is:\n", dataFileName);
  printf("    ");
  numChars = fread(buffer, 1, maxChars, fp);
  while (numChars > 0)
  {
    for (charNb = 0; charNb < numChars; charNb++)
    {
      if (buffer[charNb] == '\n')
      {
        printf("\n");
        if (charNb < numChars - 1)
        {
          printf("    ");
        }
      }
      else
      {
        printf("%c", buffer[charNb]);
      }
    }
    numChars = fread(buffer, 1, maxChars, fp);
  }

  if (ferror(fp))
  {
    fclose(fp);
    return 1;
  }
  else
  {
    fclose(fp);
  }

  return 0;
} /* ExportedDataDisplay */

int ImportedDataDisplay(void)
{
  struct sqlca sqlca = {0};

  printf("\n  SELECT * FROM customer_xml ORDER BY cid\n");
  printf("    CID      INFO      \n");
  printf("    -------- --------------\n");

  strcpy(strStmt, "SELECT * FROM customer_xml ORDER BY cid");

  EXEC SQL PREPARE stmt FROM :strStmt;
  EMB_SQL_CHECK("statement -- prepare");

  EXEC SQL DECLARE c0 CURSOR FOR stmt;

  EXEC SQL OPEN c0;
  EMB_SQL_CHECK("cursor -- open");

  EXEC SQL FETCH c0 INTO :cid, :info;
  EMB_SQL_CHECK("cursor -- fetch");

  while (sqlca.sqlcode != 100)
  {
    printf("    %8d %-s\n", cid, info.data);

    EXEC SQL FETCH c0 INTO :cid, :info;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  EXEC SQL CLOSE c0;

  return 0;
} /* ImportedDataDisplay */

int DataExport(char *dataFileName)
{
  int rc = 0;
  unsigned short saveschema = 1;
  struct sqlca sqlca = {0};
  struct sqldcol dataDescriptor = {0};
  char actionString[256];
  struct sqllob *pAction = {0};
  char msgFileName[128];
  struct db2ExportOut outputInfo = {0};
  struct db2ExportIn inputInfo = {0};
  struct db2ExportStruct exportParmStruct = {0};
  struct sqlchar *fileTypeMod = NULL;
  struct sqlu_media_entry *pPathList = {0};
  struct sqlu_location_entry *psLocationEntry = {0};
  union sqlu_media_list_targets listTargetsXmlPath = {0}, listTargetsXmlFile = {0};
  struct sqlu_media_list mediaListXmlPath = {0}, mediaListXmlFile = {0};
  char temp[256];

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE DB2 API:\n");
  printf("  db2Export -- Export\n");
  printf("TO EXPORT DATA TO A FILE.\n");

  printf("\n  Be sure to complete all table operations and release\n");
  printf("  all locks before starting an export operation. This\n");
  printf("  can be done by issuing a COMMIT after closing all\n");
  printf("  cursors opened WITH HOLD, or by issuing a ROLLBACK.\n");
  printf("  Please refer to the 'Administrative API Reference'\n");
  printf("  for the details.\n");

  /* export data */
  dataDescriptor.dcolmeth = SQL_METH_D;
  strcpy(actionString, "SELECT Cid,Info FROM customer_xml ORDER BY Cid");
  pAction = (struct sqllob *)malloc(sizeof(sqluint32) +
                                     sizeof(actionString) + 1);
  pAction->length = strlen(actionString);
  strcpy(pAction->data, actionString);
  strcpy(msgFileName, "tbexport.MSG");

  /* XML Path Specification */
  pPathList=(struct sqlu_media_entry *)malloc(sizeof(struct sqlu_media_entry));
  #if(defined(DB2NT))
  sprintf(pPathList->media_entry, "%s%sxmldatadir", getenv("DB2PATH"), PATH_SEP);
  #else /* UNIX */
  sprintf(pPathList->media_entry, "%s%sxmldatadir", getenv("HOME"), PATH_SEP);
  #endif

  listTargetsXmlPath.media = pPathList;
  mediaListXmlPath.media_type = 'L';
  mediaListXmlPath.sessions = 1;
  mediaListXmlPath.target = listTargetsXmlPath;

  /* XMLFILE base name specification */
  psLocationEntry=(struct sqlu_location_entry *)malloc(sizeof(struct sqlu_location_entry));
  strcpy(psLocationEntry->location_entry,"expxmlfile");
  listTargetsXmlFile.location = psLocationEntry;
  mediaListXmlFile.media_type = 'C';
  mediaListXmlFile.sessions = 1;
  mediaListXmlFile.target = listTargetsXmlFile;
  
  /* File Type Modifier for Export Utility */  
  strcpy(temp,"XMLINSEPFILES");
  fileTypeMod = (struct sqlchar *) malloc(sizeof(short) + sizeof (temp) + 1);
  fileTypeMod->length = strlen(temp);
  strcpy(fileTypeMod->data,temp);

  /* XML Save Schema Option */
  inputInfo.piXmlSaveSchema = &saveschema;
 
  /* Export Data */ 
  exportParmStruct.piDataFileName    = dataFileName;
  exportParmStruct.piLobPathList     = NULL;
  exportParmStruct.piLobFileList     = NULL;
  exportParmStruct.piDataDescriptor  = &dataDescriptor;
  exportParmStruct.piActionString    = pAction;
  exportParmStruct.piFileType        = SQL_DEL;
  exportParmStruct.piFileTypeMod     = fileTypeMod;
  exportParmStruct.piMsgFileName     = msgFileName;
  exportParmStruct.iCallerAction     = SQLU_INITIAL;
  exportParmStruct.poExportInfoOut   = &outputInfo;
  exportParmStruct.piExportInfoIn    = &inputInfo;
  exportParmStruct.piXmlPathList     = &mediaListXmlPath;
  exportParmStruct.piXmlFileList     = &mediaListXmlFile;

  printf("\n  Export data.\n");
  printf("    client destination file name: %s\n", dataFileName);
  printf("    action                      : %s\n", actionString);
  printf("    client message file name    : %s\n", msgFileName);

  /*Performing Export data */
  printf(" \n EXPORT TO expxmldata.del OF DEL XML TO xmldatadir XMLFILE expxmlfile\n");
  printf("    MODIFIED BY XMLCHAR XMLINSEPFILES XMLSAVESCHEMA \n");
  printf("    SELECT CID, INFO FROM customer_xml ORDER BY Cid\n ");
  db2Export(db2Version970,
            &exportParmStruct,
            &sqlca);

  DB2_API_CHECK("data -- export");

  /* free memory allocated */
  free(pAction);
  free(pPathList);
  free(fileTypeMod);
  free(psLocationEntry);

  /* display exported data */
  rc = ExportedDataDisplay(dataFileName);

  return 0;
} /* DataExport */

int TbImport(char *dataFileName)
{
   int rc = 0;
   int totalLength = 0;
   struct sqlca sqlca = {0};
   struct sqldcol dataDescriptor = {0};
   char actionString[256];
   struct sqlchar *pAction = {0};
   char msgFileName[128];
   struct db2ImportIn inputInfo = {0};
   struct db2ImportOut outputInfo = {0};
   struct db2ImportStruct importParmStruct = {0};
   int commitcount = 10;
   int whiteSpace = 1;
   unsigned short xmlParse = whiteSpace;
   struct sqlchar *fileTypeMod = NULL;
   struct sqlu_media_entry *pPathList = {0};
   union sqlu_media_list_targets listTargetsXmlPath;
   struct sqlu_media_list mediaListXmlPath = {0};
   struct db2DMUXmlValidate xmlValidate = {0};
   struct db2DMUXmlValidateXds xdsArgs = {0};
   struct db2Char defaultSchema = {0}, ignoreSchemas = {0};
   struct db2DMUXmlMapSchema mapSchemas = {0};
   struct db2Char mapFromSchema = {0};
   struct db2Char mapToSchema = {0};
   char expDataFileName[256];
   char temp[256];
 
   printf("\n  CREATE TABLE customer_xml(Cid INT,");
   printf("\n                        Info XML))\n");

   EXEC SQL CREATE TABLE customer_xml(Cid INT, Info XML);
   EMB_SQL_CHECK("customer_xml -- create");
   
   printf("\n-----------------------------------------------------------");
   printf("\nUSE THE DB2 API:\n");
   printf("  db2Import -- Import\n");
   printf("TO IMPORT DATA TO A TABLE.\n");
 
   /* import table */
   dataDescriptor.dcolmeth = SQL_METH_D;
   strcpy(actionString, "INSERT INTO customer_xml");
   pAction = (struct sqlchar *)malloc(sizeof(short) + sizeof(actionString) + 1);
   pAction->length = strlen(actionString);
   strcpy(pAction->data, actionString);
   strcpy(msgFileName, "tbimport.MSG");

   /* Setup db2ImportIn structure */

   /* XML Path setup */ 
   pPathList=(struct sqlu_media_entry *)malloc(sizeof(struct sqlu_media_entry));
   #if(defined(DB2NT))
   sprintf(pPathList->media_entry, "%s%sxmldatadir", getenv("DB2PATH"), PATH_SEP);
   #else /* UNIX */
   sprintf(pPathList->media_entry, "%s%sxmldatadir", getenv("HOME"), PATH_SEP);
   #endif
  
   listTargetsXmlPath.media = pPathList;
   mediaListXmlPath.media_type = 'L';
   mediaListXmlPath.sessions = 1;
   mediaListXmlPath.target = listTargetsXmlPath;

   /* File Type Modifier for Import Utility */
   strcpy(temp,"XMLCHAR");
   fileTypeMod = (struct sqlchar *) malloc(sizeof(short) + sizeof (temp) + 1);
   fileTypeMod->length = strlen(temp);
   strcpy(fileTypeMod->data,temp);
 
   /* XML validate using XDS set up */
   defaultSchema.iLength = 8;
   defaultSchema.pioData=malloc(9);
   strcpy(defaultSchema.pioData,"customer");
   ignoreSchemas.iLength = 8;
   ignoreSchemas.pioData=malloc(9);
   strcpy(ignoreSchemas.pioData,"supplier");
   mapFromSchema.iLength = 7;
   mapFromSchema.pioData=malloc(8);
   strcpy(mapFromSchema.pioData,"product");
   mapToSchema.iLength = 8;
   mapToSchema.pioData=malloc(9);
   strcpy(mapToSchema.pioData,"customer");
   mapSchemas.iMapFromSchema = mapFromSchema;
   mapSchemas.iMapToSchema = mapToSchema;
   xdsArgs.piDefaultSchema = &defaultSchema;
   xdsArgs.iNumIgnoreSchemas = 1;
   xdsArgs.piIgnoreSchemas =&ignoreSchemas;
   xdsArgs.iNumMapSchemas = 1;
   xdsArgs.piMapSchemas = &mapSchemas;
   xmlValidate.iUsing = DB2DMU_XMLVAL_XDS;
   xmlValidate.piXdsArgs =&xdsArgs;
   
   inputInfo.iRowcount = inputInfo.iRestartcount = 0;
   inputInfo.iSkipcount = inputInfo.iWarningcount = 0;
   inputInfo.iNoTimeout = 0;
   inputInfo.iAccessLevel = SQLU_ALLOW_NO_ACCESS;
   inputInfo.piCommitcount = &commitcount;
   inputInfo.piXmlParse = &xmlParse;
   inputInfo.piXmlValidate = &xmlValidate;

   printf("\n  Import table.\n");
   printf("    client source file name: %s\n", dataFileName);
   printf("    action                  : %s\n", actionString);
   printf("    client message file name: %s\n", msgFileName);

   importParmStruct.piFileType        = SQL_DEL;
   importParmStruct.piFileTypeMod     = fileTypeMod;
   importParmStruct.piDataFileName    = dataFileName;
   importParmStruct.piLobPathList     = NULL;
   importParmStruct.piDataDescriptor  = &dataDescriptor;
   importParmStruct.piActionString    = pAction;
   importParmStruct.piMsgFileName     = msgFileName;
   importParmStruct.piImportInfoIn    = &inputInfo;
   importParmStruct.poImportInfoOut   = &outputInfo;
   importParmStruct.piNullIndicators  = NULL;
   importParmStruct.iCallerAction     = SQLU_INITIAL;
   importParmStruct.piXmlPathList     = &mediaListXmlPath;

   printf("\n-----------------------------------------------------------");
   printf("\nUSE THE DB2 API:\n");
   printf("  db2Import -- Import\n");
   printf("TO IMPORT DATA TO A FILE.\n");

   /* import table */
   printf("\n IMPORT FROM xmldata.del OF DEL XML FROM xmldatadir\n");
   printf("   MODIFIED BY XMLCHAR XMLVALIDATE using XDS DEFAULT customer \n");
   printf("   IGNORE (supplier) MAP((product,customer))\n");
   printf("   INSERT INTO customer_xml \n");
 
   db2Import(db2Version970,
            &importParmStruct,
            &sqlca);

   EXEC SQL COMMIT;

   /* free memory allocated */
   free(pAction);
   free(pPathList);
   free(fileTypeMod);
   free(defaultSchema.pioData);
   free(ignoreSchemas.pioData);
   free(mapFromSchema.pioData);
   free(mapToSchema.pioData);

   /* display import info */
   printf("\n  Import info.\n");
   printf("    rows read     : %ld\n", (int)outputInfo.oRowsRead);
   printf("    rows skipped  : %ld\n", (int)outputInfo.oRowsSkipped);
   printf("    rows inserted : %ld\n", (int)outputInfo.oRowsInserted);
   printf("    rows updated  : %ld\n", (int)outputInfo.oRowsUpdated);
   printf("    rows rejected : %ld\n", (int)outputInfo.oRowsRejected);
   printf("    rows committed: %ld\n", (int)outputInfo.oRowsCommitted);

   /* display content of the new table */
   rc = ImportedDataDisplay();
    
   #if(defined(DB2NT))
   sprintf(expDataFileName, "%s%sexpxmldata.DEL", getenv("DB2PATH"), PATH_SEP);
   #else /* UNIX */
   sprintf(expDataFileName, "%s%sexpxmldata.DEL", getenv("HOME"), PATH_SEP);
   #endif

   rc = DataExport(expDataFileName);
 
   /* drop new table */
   printf("\n  DROP TABLE customer_xml\n");

   EXEC SQL DROP TABLE customer_xml;
   EMB_SQL_CHECK("customer_xml -- drop");

   return 0;
} /* TbImport */

