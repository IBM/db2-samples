/***************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SAMPLE FILE NAME: xmlxslt.sqc
**
** PURPOSE: The purpose of this sample is to show:
**     1. Using XSLTRANSFORM function to convert one XML document into another
**        using an XSLT stylesheet.
**     2. Passing an XSL parameter document to the XSLTRANSFORM function
**        at runtime.
**
** USAGE SCENARIO: A supermarket manager maintains a webpage to show
**                 the details of the products available in his shop. 
**                 He maintains two tables, namely "product_details"
**                 and "display_productdetails".
**                 The "product_details" table contains information about
**                 all of the products available in his shop, where the
**                 details for each product are in an XML document format.
**                 The "display_productdetails" table contains the XSLT 
**                 stylesheet, which specifies how to display the product 
**                 details on the webpage.
**
** PREREQUISITE: NONE
**
** EXECUTION: bldapp xmlxslt;
**            xmlxslt
**
** INPUTS: NONE
**
** OUTPUTS: Displays new XML documents that result from the XSLT conversion.
**
** OUTPUT FILE: xmlxslt.out (available in the online documentation)
**
** SQL STATEMENTS USED:
**           CREATE TABLE
**           INSERT
**           DROP
**
** SQL/XML FUNCTIONS USED:
**          XSLTRANSFORM
**
*****************************************************************************
**
** For more information about the command line processor (CLP) scripts,
** see the README file.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
*****************************************************************************
**
**  SAMPLE DESCRIPTION
**
*****************************************************************************
** 1. Using the XSLTRANSFORM function to convert one XML document to another
**    using an XSLT stylesheet.
**      1.1 Insert an XML document into the "product_details" table.
**      1.2 Insert an XSL stylesheet into the "display_productdetails" table.
**      1.3 Display the new XML document after transforming the XML document 
**          in the "product_details" table using the XSL stylesheet.
**
** 2. Passing an XSL parameter document to the XSLTRANSFORM function
**    during transformation.
**     2.1 Insert a parameter document into the "param_tab" table.
**     2.2 Display the new XML document after transforming the XML document 
**         in the "product_details" table using the XSL stylesheet with
**         the parameter document.
**
****************************************************************************
**
**  INCLUDE ALL HEADER FILES
**
****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include <sqlcodes.h>
#include "utilemb.h"

EXEC SQL INCLUDE SQLCA;

/****************************************************************************
**
**       DECLARE HOST VARIABLES
**
*****************************************************************************/

EXEC SQL BEGIN DECLARE SECTION; /* Start of declare section */
  char dbAlias[8];
  char user[30];
  char pswd[30];
  char stmt[1000];
EXEC SQL END DECLARE SECTION; /* End of declare section */


int main(int argc, char *argv[])
{
  int rc = 0;
  struct sqlca sqlca;

  /* check the command line arguments */
  rc = CmdLineArgsCheck1(argc, argv, dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }

  /* connect to the sample database */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }

  printf("\n\nThis sample shows how to use XSLTRANSFORM function ");
  printf(" to convert one XML document into another.\n");
  printf("------------------------------------------------------\n");

  /***************************************************************************
  ** 1. Using the XSLTRANSFORM function to convert one XML document to another
  **    using an XSLT stylesheet.
  ****************************************************************************/

  printf("CREATE TABLE product_details (productid INTEGER, description XML)");
  EXEC SQL CREATE TABLE product_details (productid INTEGER, description XML); 
  EMB_SQL_CHECK("CREATE TABLE product_details");


  printf("\n\nCREATE TABLE display_productdetails (productid INTEGER,");
  printf("stylesheet CLOB (1M))");
  EXEC SQL CREATE TABLE display_productdetails (productid INTEGER, 
						stylesheet CLOB (1M));
  EMB_SQL_CHECK("CREATE TABLE display_productdetails");

  /***************************************************************************
  **      1.1 Insert an XML document into the "product_details" table.
  ****************************************************************************/

  printf("\n\nINSERT an XML document into the product_details table");
  strcpy(stmt, "INSERT INTO product_details "
        "VALUES (1, '<?xml version=\"1.0\"?> " 
        "<products xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"
        "<product pid=\"100-201-01\">"
           "<description>"
              "<name>Ice Scraper,Windshield 4 inch</name>"
              "<details>Basic Ice Scraper 4 inches wide, foam handle</details>"
              "<price>3.99</price>"
           "</description>"
           "<supermarketname> BIG BAZAR </supermarketname></product>"
        "</products>')");

  EXEC SQL EXECUTE IMMEDIATE :stmt;
  EMB_SQL_CHECK("INSERT INTO product_details");

  /***************************************************************************
  **      1.2 Insert an XSL stylesheet into the "display_productdetails" table.
  ****************************************************************************/ 

  printf("\n\nINSERT XSLT document into the display_productdetails table");
  strcpy(stmt, "INSERT INTO display_productdetails VALUES(1, "
        "'<?xml version=\"1.0\" encoding=\"UTF-8\"?><xsl:stylesheet "
        "version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">"
        "<xsl:param name=\"headline\"/><xsl:param name=\"supermarketname\"/>"
        "<xsl:template match=\"products\">"
        "<html>"
        "<head/>"
        "<body>"
        "<h1><xsl:value-of select=\"$headline\"/></h1>"
        "<table border=\"1\">"
        "<th><tr><td width=\"80\">product ID</td>"
        "<td width=\"200\">product name</td><td width=\"200\">price</td>"
        "<td width=\"200\">details</td><xsl:choose>"
        "<xsl:when test=\"$supermarketname =''true'' \">"
        "<td width=\"200\">supermarket name</td></xsl:when>"
        "</xsl:choose></tr></th><xsl:apply-templates/>"
        "</table></body></html></xsl:template> "
        "<xsl:template match=\"product\"><tr><td>"
        "<xsl:value-of select=\"@pid\"/></td><td>"
        "<xsl:value-of select=\"/products/product/description/name\"/></td>"
        "<td><xsl:value-of select=\"/products/product/description/price\"/>"
        "</td><td><xsl:value-of select=\"/products/product/description/"
        "details\"/></td><xsl:choose><xsl:when test=\"$supermarketname = "
        " ''true'' \"><td><xsl:value-of select=\"/products/product/"
        "supermarketname\"/></td></xsl:when></xsl:choose></tr>"
        "</xsl:template></xsl:stylesheet>')");


  EXEC SQL EXECUTE IMMEDIATE :stmt;
  EMB_SQL_CHECK("INSERT INTO display_productdetails");

  /***************************************************************************
  **      1.3 Display the new XML document after transforming the XML document
  **          in the "product_details" table using the XSL stylesheet.
  ****************************************************************************/ 

  printf("\n\nDisplay the final document in HTML format");
  printf("\nSELECT XSLTRANSFORM (description USING stylesheet AS CLOB(1M))");
  printf(" FROM product_details X, display_productdetails D");
  printf(" WHERE X.productid = D.productid");


  strcpy(stmt,"SELECT XSLTRANSFORM (description USING stylesheet AS CLOB (1M))"
           " FROM product_details X, display_productdetails D "
           "WHERE X.productid = D.productid");
  EXEC SQL PREPARE s1 FROM :stmt;
  EMB_SQL_CHECK("PREPARE statement");

  EXEC SQL DECLARE c1 CURSOR FOR s1;
  EMB_SQL_CHECK("DECLARE CURSOR c1");

  EXEC SQL OPEN c1;
  EMB_SQL_CHECK("OPEN CURSOR c1");

  EXEC SQL FETCH c1 INTO :stmt;
  EMB_SQL_CHECK("FETCH CURSOR c1");


  printf("\n------------------------------------------------------------");
  printf("\n\n%s\n", stmt);
 
  printf("\n------------------------------------------------------------");
  EXEC SQL CLOSE c1; 
  EMB_SQL_CHECK("CLOSE c1");

  /**************************************************************************
  ** 2. Passing an XSL parameter document to the XSLTRANSFORM function
  **    during transformation.
  ***************************************************************************/

  printf("\n\nThe following part shows how to pass parameters to");
  printf(" XSLTRANSFORM function");
  printf("\n----------------------------------------------------------");

  printf("\n\nCREATE TABLE param_tab(productid INTEGER, ");
  printf("param VARCHAR (1000))"); 

  EXEC SQL CREATE TABLE param_tab(productid INTEGER, 
                                   param VARCHAR (1000));
  EMB_SQL_CHECK("CREATE TABLE param_tab"); 

  /**************************************************************************
  **     2.1 Insert a parameter document into the table "param_tab". 
  ***************************************************************************/

  printf("\n\nInsert parameter value into param_tab table");
  strcpy(stmt, "INSERT INTO param_tab "
         "VALUES (1, '<?xml version=\"1.0\"?>"
            "<params xmlns=\"http://www.ibm.com/XSLTransformParameters\">"
               "<param name=\"supermarketname\" value=\"true\"/>"
               "<param name=\"headline\">BIG BAZAR super market</param>"
            "</params>')");

  EXEC SQL EXECUTE IMMEDIATE :stmt;
  EMB_SQL_CHECK("INSERT INTO param_tab");

  /**************************************************************************
  **     2.2 Display the new XML document after transforming the XML document
  **         in the "product_details" table using the XSL stylesheet with
  **         the parameter document.
  ***************************************************************************/

  printf("\n\nDisplay final document in new format");
  printf("\nSELECT XSLTRANSFORM (description USING stylesheet WITH param AS");
  printf(" CLOB (1M)) FROM product_details X, param_tab P,");
  printf("display_productdetails D WHERE X.productid=P.productid ");
  printf("and X.productid = D.productid ");

  strcpy(stmt,"SELECT XSLTRANSFORM (description USING stylesheet WITH param" 
         " AS CLOB (1M)) "
         "FROM product_details X,param_tab P,display_productdetails D "
         "WHERE X.productid=P.productid AND X.productid = D.productid");

  EXEC SQL PREPARE s2 FROM :stmt; 
  EMB_SQL_CHECK("PREPARE statement s2");

  EXEC SQL DECLARE c2 CURSOR FOR s2;
  EMB_SQL_CHECK("DECLARE CURSOR c2");

  EXEC SQL OPEN c2;
  EMB_SQL_CHECK("OPEN CURSOR c2");

  EXEC SQL FETCH c2 INTO :stmt;
  EMB_SQL_CHECK("FETCH CURSOR c2");

  printf("\n--------------------------------------------------------");
  printf("\n\n%s\n", stmt);
  printf("\n--------------------------------------------------------");

  EXEC SQL CLOSE c2;
  EMB_SQL_CHECK("CLOSE c2");

  /********************************************************************
  **
  **      CLEANUP
  **
  *********************************************************************/

  printf("\ndrop all of the tables created\n");
  EXEC SQL DROP TABLE display_productdetails;
  EMB_SQL_CHECK("DROP TABLE display_productdetails");

  EXEC SQL DROP TABLE product_details;
  EMB_SQL_CHECK("DROP TABLE product_details");

  EXEC SQL DROP TABLE param_tab;
  EMB_SQL_CHECK("DROP TABLE param_tab");
}
