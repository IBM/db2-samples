/*************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
***************************************************************************
**
** SOURCE FILE NAME: xquery_xmlproc.sqc
**
** SAMPLE: Code implementation of a stored procedure Supp_XML_Proc_C
**
**         The stored procedures defined in this program is called by the client 
**         application client_xquery_xmlproc.sqc. Before building and running
**         client_xquery_xmlproc.sqc, build the shared library by completing the 
**         following steps:
**
** BUILDING THE SHARED LIBRARY:
** 1. Ensure the Database Manager Configuration file has the keyword
**    KEEPFENCED set to "no". This allows shared libraries to be unloaded
**    while you are developing stored procedures. You can view the file's
**    settings by issuing the command: "db2 get dbm cfg". You can set
**    KEEPFENCED to "no" with this command: "db2 update dbm cfg using
**    KEEPFENCED no". NOTE: Setting KEEPFENCED to "no" reduces performance
**    the performance of accessing stored procedures, because they have
**    to be reloaded into memory each time they are called. If this is a
**    concern, set KEEPFENCED to "yes", stop and then restart DB2 before
**    building the shared library, by entering "db2stop" followed by
**    "db2start". This forces DB2 to unload shared libraries and enables
**    the build file or the makefile to delete a previous version of the
**    shared library from the "sqllib/function" directory.
** 2. To build the shared library, enter "bldrtn xquery_xmlproc", or use the
**    makefile: "make xquery_xmlproc" (UNIX) or "nmake xquery_xmlproc" (Windows).
**
** CATALOGING THE STORED PROCEDURES
** 1. The stored procedures are cataloged automatically when you build
**    the client application "client_xquery_xmlproc" using the appropriate "make" 
**    utility for your Operating System and the "makefile" provided with these
**    samples. If you wish to catalog or recatalog them manually, enter
**    "spcat_xquery". The spcat_xquery script (UNIX) or spcat_xquery.bat batch file (Windows)
**    connects to the database, runs xquery_xmlproc_drop.db2 to uncatalog the stored
**    procedures if they were previously cataloged, then runs xquery_xmlproc_create.db2
**    which catalogs the stored procedures, then disconnects from the
**    database.
**
** CALLING THE STORED PROCEDURES IN THE SHARED LIBRARY:
** 1. Compile the client_xquery_xmlproc program with "bldapp client_xquery_xmlproc" 
**    or use the makefile: "make client_xquery_xmlproc" (UNIX) or 
**    "nmake client_xquery_xmlproc" (Windows).
** 2. Run client_xquery_xmlproc: "client_xquery_xmlproc" (if calling remotely add 
**    the parameters for database, user ID and password.)
**
** Function xquery_Proc solves the following scenario:
**         Some of the suppliers have extended the promotional price date for
**         their products. Getting all the customer's Information who purchased
**         these products in the extended period will help the financial department
**         to return the excess amount paid by those customers. The supplier
**         information along with extended date's for the products is provided
**         in an XML document and the client wants to have the information
**         of all the customers who has paid the excess amount by purchasing those
**         products in the extended period.
**
**         This procedure will return an XML document containing customer information
**         along with the the excess amount paid by them.
**
** SQL STATEMENTS USED:
**         CLOSE
**         DECLARE
**         FETCH
**         OPEN
**         SELECT
**         SELECT INTO
**         CREATE
**
** STRUCTURES USED:
**         sqlca
**         sqlda
**
** EXTERNAL DEPENDENCIES:
**        This program must be built on a DB2 server.
**        Ensure existence of the sample database.
**        Precompile with the SQL precompiler (PREP in DB2)
**        Bind to a database (BIND in DB2)
**        Compile and link loop with the compiler supported on your
**        platform.
**
** OUTPUT FILE: client_xquery_xmlproc.out (available in the online documentation)
***************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
***************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sqlda.h>
#include <sqlca.h>
#include <sqludf.h>
#include <sql.h>
#include <memory.h>

SQL_API_RC SQL_API_FN xquery_proc(  SQLUDF_CLOB* inXML,
                                    SQLUDF_CLOB* outXML,
                                    sqlint32 *outReturnCode,
                                    SQLUDF_NULLIND *inXML_ind,
                                    SQLUDF_NULLIND *outXML_ind,
                                    SQLUDF_NULLIND *outReturnCode_ind,
                                    SQLUDF_TRAIL_ARGS)
{

  EXEC SQL INCLUDE SQLCA;

  EXEC SQL BEGIN DECLARE SECTION;
       sqlint64 custid,quantity;
       SQL TYPE IS XML AS CLOB(5000) ipdata,orders,tempXML;
       char prodid[12],partid[12];
       char oldPromoDate[11], newPromoDate[11];
       double originalPrice,promoPrice,excessamount;
       char insstmt1[1024],insstmt2[1024];
       char stmt_xq1[2024],stmt_xq2[2024],stmt_xq3[2024],stmt_xq4[2024];
  EXEC SQL END DECLARE SECTION;

  /* Initialize the input data */
  ipdata.length = 0;
  strcpy(ipdata.data," ");

  /* Initialize output parameters .. */
  *outReturnCode = -1;
  *outReturnCode_ind = 0;

  /* Copy input parameters to host variables */
  ipdata.length = inXML->length;
  strncpy(ipdata.data, inXML->data, inXML->length);
  ipdata.data[ipdata.length]='\n';

  /* an XQUERY statement to restructure all the PurchaseOrders
     into the following form
     <items>
        <item OrderDate="YYYY-MM-DD">
              <custid>XXXX</custid>
              <partid>XXX-XXX-XX</partid>
              <quantity>XX</quantity>
        </item>................<item>...............</item>
        <item>.................</itemm
     </items>
     store the above XML document in an application variable "orders" */
  sprintf(stmt_xq1,"XQUERY let $po:=db2-fn:sqlquery(\"SELECT XMLELEMENT( NAME \"\"porders\"\","
                   "( XMLCONCAT( XMLELEMENT(NAME \"\"custid\"\", p.custid), p.porder))) "
                   "FROM PURCHASEORDER as p\") return <items>{for $i in $po for $j in "
                   "$po[custid=$i/custid]/PurchaseOrder[@PoNum=$i/PurchaseOrder/@PoNum]/item "
                   "return <item>{$i/PurchaseOrder/@OrderDate}{$i/custid}{$j/partid}"
                   "{$j/quantity}</item>}</items>");

  EXEC SQL PREPARE stmt1 FROM :stmt_xq1 ;
  EXEC SQL DECLARE cur_xq1 CURSOR FOR stmt1;
  EXEC SQL OPEN cur_xq1;
  EXEC SQL FETCH cur_xq1 INTO :orders;
  EXEC SQL CLOSE cur_xq1;

  /* select the oldpromodate, newpromodate, price and promoprice
     for the products for which the promodate is extended
     using input XML document */
  sprintf(stmt_xq2,"SELECT Pid,PromoEnd,Price,PromoPrice,XMLCAST(XMLQUERY("
                   "'$info/Suppliers/Supplier/Products/Product[@id=$pid]/ExtendedDate'"
                   "passing cast(? as XML) as \"info\",  pid as \"pid\") as DATE) FROM "
                   "product WHERE XMLEXISTS('for $prod in $info//Product[@id=$pid] return"
                   " $prod' passing by ref cast(? as XML) as \"info\", pid as \"pid\")");

  EXEC SQL PREPARE stmt2 FROM :stmt_xq2;
  EXEC SQL DECLARE cur_xq2 CURSOR FOR stmt2;
  EXEC SQL OPEN cur_xq2 USING :ipdata, :ipdata;
  EXEC SQL FETCH cur_xq2 INTO :prodid, :oldPromoDate, :originalPrice, :promoPrice, :newPromoDate;
 
  /* create two temporary tables */
  EXEC SQL CREATE TABLE temp_table1(custid INT,partid VARCHAR(12),excessamount DECIMAL(30,2));
  EXEC SQL CREATE TABLE temp_table2(cid INT,total DECIMAL(30,2));

  /* repeat the above for all products */
  while (sqlca.sqlcode != 100)
  {
       /* finding out the toatal quantity of the product purchased by a customer
          if that order is made in between oldpromodate and extended promodate.
          this query will return the custid, product id and total quantity of
          that product purchased in all his orders. */
       sprintf(stmt_xq3,"WITH temp1 AS (SELECT cid,partid,quantity,orderdate FROM "
                        "XMLTABLE('$od//item' passing cast(? as XML) as \"od\" "
                        "COLUMNS cid BIGINT path './custid', "
                        "partid VARCHAR(20) path './partid', orderdate DATE path "
                        "'./@OrderDate', quantity BIGINT path './quantity') as temp2) "
                        "SELECT  temp1.cid, temp1.partid, sum(temp1.quantity) as quantity "
                        "FROM temp1 WHERE partid=? and orderdate>cast(? as DATE) and  "
                        "orderdate<cast(? as DATE) group by temp1.cid,temp1.partid");

       EXEC SQL PREPARE stmt3 FROM :stmt_xq3;
       EXEC SQL DECLARE cur_xq3 CURSOR FOR stmt3;
       EXEC SQL OPEN cur_xq3 using :orders, :prodid, :oldPromoDate, :newPromoDate;
       EXEC SQL FETCH cur_xq3  INTO :custid,:partid,:quantity;

       /* repeat the above  to findout all the customers */ 
       while (sqlca.sqlcode != 100)
       {
           /* excess amount to be paid to customer for that product and insert into table*/
           excessamount = (originalPrice - promoPrice)*quantity;
           sprintf(insstmt1,"INSERT INTO temp_table1(custid,partid,excessamount) values(?,?,?)");
           EXEC SQL PREPARE insertStmt FROM :insstmt1;
           EXEC SQL EXECUTE insertStmt using :custid, :partid, :excessamount;
           EXEC SQL FETCH cur_xq3  INTO :custid,:partid,:quantity;
       }
       EXEC SQL CLOSE cur_xq3;

       EXEC SQL FETCH cur_xq2 INTO :prodid,:oldPromoDate,:originalPrice,:promoPrice,:newPromoDate;
  }
  EXEC SQL CLOSE cur_xq2;
  /* insert into a table with aggregate amount */
  sprintf(insstmt2, "INSERT INTO temp_table2( SELECT custid, sum(excessamount) "
                    "FROM temp_table1 GROUP BY custid)");
  EXEC SQL PREPARE insertStmt2 FROM :insstmt2;
  EXEC SQL EXECUTE insertStmt2;

  /* format the results into an XML document of the following form
     <Customers>
        <Customer>
            <Custid>XXXX</Custid>
            <Total>XXXX.XXXX</Total>
            <customerinfo Cid="xxxx">
                 <name>xxxx xxx</name>
                 <addr country="xxx>........
                 </addr>
                 <phone type="xxxx">.........
                 </phone>
            </customerinfo>
        </Customer>............
     </Customers> */
  sprintf(stmt_xq4, "XQUERY let $res:=db2-fn:sqlquery(\"SELECT XMLELEMENT( NAME "
                    "\"\"Customer\"\",( XMLCONCAT(XMLELEMENT(NAME \"\"Custid\"\", t.cid),"
                    "XMLELEMENT( NAME \"\"Total\"\", t.total),c.info))) "
                    "FROM temp_table2 AS t,customer AS c WHERE t.cid = c.cid\") "
                    "return <Customers>{$res}</Customers>");

  EXEC SQL PREPARE stmt4 FROM :stmt_xq4;
  EXEC SQL DECLARE cur_xq4 CURSOR FOR stmt4;
  EXEC SQL OPEN cur_xq4;
  EXEC SQL FETCH cur_xq4 INTO :tempXML;
  EXEC SQL CLOSE cur_xq4;

  /* drop the  temporary tables */
  EXEC SQL DROP TABLE temp_table1;
  EXEC SQL DROP TABLE temp_table2;

  /* assign the data to output parameters */
  outXML->length = tempXML.length;
  strncpy(outXML->data, tempXML.data, tempXML.length);
  *outXML_ind = 0;

  *outReturnCode = sqlca.sqlcode;
  *outReturnCode_ind = 0;

  return 0;
}
