/****************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SOURCE FILE NAME: sqlxquery.sqc
**
** SAMPLE: SQL/XML  Queries
**
** SQL/XML FUNCTIONS USED
**                XMLQUERY
**                XMLEXISTS
**
** OUTPUT FILE: sqlxquery.out (available in the online documentation)
*****************************************************************************
**
** For more information about the command line processor (CLP) scripts,
** see the README file.
**
** For information on using XQUERY statements, see the XQUERY Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**    http://www.software.ibm.com/data/db2/udb/ad
*****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlcodes.h>
#include <sqlutil.h>
#include "utilemb.h"

EXEC SQL BEGIN DECLARE SECTION;
  char stmt[16384];
  SQL TYPE IS XML AS BLOB( 10K ) xmlblob;
  SQL TYPE IS XML AS BLOB( 10K ) xmlblob2;
  SQL TYPE IS XML AS BLOB( 10K ) xmlblob3;
  sqlint64 cid; 
  char custname[20];
  sqlint32 count;
  char name[20];
  char partid[20];
EXEC SQL END DECLARE SECTION;

/* The firstPO1 function returns the first item in the purchase order for customer custname passed as an argument*/
int firstPO1(char *custname);

/* The firstPO2 function returns the first item in the purchaseorder when
   Name is from the sequence (X,Y,Z)
   or the customer id is from the sequence (1000,1002,1003)  */
int firstPO2(); 

/* The sortCust_PO function sort the customers according to the number of purchaseorders */
int sortCust_PO();

/* The numPO function returns the number of purchaseorder having specific partid
   for the specific customer passed as an argument to the function*/
int numPO(char *name, char *partid);
 
int main(int argc, char *argv[])
{
  int rc = 0;
  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];
  /* check the command line arguments */
  rc = CmdLineArgsCheck1(argc, argv, dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }
   /* connect to database */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }
  strcpy(custname,"Robert Shoemaker"); 
  rc=firstPO1(custname);
  
  rc=firstPO2();
  rc=sortCust_PO();
  
  strcpy(name,"Robert Shoemaker");
  strcpy(partid,"100-101-01");
  
  rc=numPO(name,partid);
  return 0;
} /* main */

int firstPO1(char *custname)
{
   int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  DECLARE CURSOR\n");
  printf("  OPEN\n");
  printf("  FETCH\n");
  printf("  CLOSE\n");
  printf("TO SELECT FIRST PURCHASEORDER OF THE CUSTOMERS USING SQL/XML QUERY\n");
  printf("CUSTOMER NAME: %s",custname);
  sprintf( stmt,"SELECT XMLQUERY('$p/PurchaseOrder/item[1]' PASSING p.porder AS \"p\")"
                " FROM purchaseorder AS p, customer AS c"
                " WHERE XMLEXISTS('$custinfo/customerinfo[name=$c and @Cid = $cid]'"
                " PASSING c.info AS \"custinfo\", p.custid AS \"cid\", cast(? as varchar(20)) as \"c\")"); 

  printf("\n%s",stmt);
  EXEC SQL PREPARE s1 FROM :stmt;
  EMB_SQL_CHECK("prepare -- statement");
  
  EXEC SQL DECLARE c1 CURSOR FOR s1;
  EMB_SQL_CHECK("declare -- cusrsor");
  
  EXEC SQL OPEN c1 USING :custname;
  EMB_SQL_CHECK("cursor -- open");
  
  EXEC SQL FETCH c1 INTO :xmlblob;
  EMB_SQL_CHECK("cursor -- fetch");
 
  /* Print the result */
  while( sqlca.sqlcode == SQL_RC_OK )
  {
    xmlblob.data[xmlblob.length]='\0';
    printf("\n\n\n%s",xmlblob.data);
    EXEC SQL FETCH c1 INTO :xmlblob;
    EMB_SQL_CHECK("cursor -- fetch");
  }
  EXEC SQL CLOSE c1;
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("cursor -- close");
  return 0;

} /* firstPO1 */


int firstPO2()
{

   int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  DECLARE CURSOR\n");
  printf("  OPEN\n");
  printf("  FETCH\n");
  printf("  CLOSE\n");
  printf("TO SELECT FIRST PURCHASEORDER OF THE CUSTOMERS BASED ON THE FOLLOWING CONDITIONS");
  printf("\n1. Customer name in the sequence (X,Y,Z) or");
  printf("\n2. Customer id in the sequence (1000,1002,1003)");
  printf(" \n\nUSING SQL/XML QUERY\n");
  sprintf( stmt,"SELECT cid,XMLQUERY('$custinfo/customerinfo/name' passing c.info as \"custinfo\"),"
                  " XMLQUERY('$p/PurchaseOrder/item[1]' passing p.porder as \"p\"),"
                "XMLQUERY('$x/history' passing c.history as \"x\")"
                " FROM purchaseorder as p,customer as c"
                " WHERE XMLEXISTS('$custinfo/customerinfo[name=(X,Y,Z)"
                " or @Cid=(1000,1002,1003) and @Cid=$cid ]'"
                " passing c.info as \"custinfo\", p.custid as \"cid\") ORDER BY cid");

  printf("\n%s",stmt);
  EXEC SQL PREPARE s2 FROM :stmt;
  EMB_SQL_CHECK("prepare -- statement");
  
  EXEC SQL DECLARE c2 CURSOR FOR s2;
  EMB_SQL_CHECK("declare -- cursor");
  
  EXEC SQL OPEN c2;
  EMB_SQL_CHECK("cursor -- open");
  
  EXEC SQL FETCH c2 INTO :cid, :xmlblob, :xmlblob2, :xmlblob3;
  EMB_SQL_CHECK("cursor -- fetch");
 
  /* print the result */
  while( sqlca.sqlcode == SQL_RC_OK )
  {
    xmlblob.data[xmlblob.length]='\0';
    xmlblob2.data[xmlblob2.length]='\0';
    xmlblob3.data[xmlblob3.length]='\0';
    printf("\n\n CID : %d\n",cid);
    printf("NAME :%s\n", xmlblob.data);
    printf("FIRST PURCHASEORDER : %s\n", xmlblob2.data);
    printf("HISTORY : %s\n", xmlblob3.data);

    EXEC SQL FETCH c2 INTO :cid,:xmlblob, :xmlblob2, :xmlblob3;
    EMB_SQL_CHECK("cursor -- fetch");
  }
  
  EXEC SQL CLOSE c2;
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("cursor -- close");
  return 0;

} /* firstPO2 */

int sortCust_PO()
{
  int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  DECLARE CURSOR\n");
  printf("  OPEN\n");
  printf("  FETCH\n");
  printf("  CLOSE\n");
  printf("TO SELECT ALL THE CUSTOMER NAMES AND SORT THEN ACCORDING TO THE NUMBER OF PURCHASE ORDERS");
  sprintf( stmt,"WITH count_table AS ( SELECT count(poid) as c,custid"
                " FROM purchaseorder,customer"
                " WHERE cid=custid group by custid )"
           " SELECT c, xmlquery('$s/customerinfo[@Cid=$id]/name'"
                               " passing customer.info as \"s\", count_table.custid as \"id\")"
           " FROM customer,count_table"
           " WHERE custid=cid ORDER BY custid");


  printf("\n%s",stmt);
  EXEC SQL PREPARE s3 FROM :stmt;
  EMB_SQL_CHECK("prepare -- statement");
  
  EXEC SQL DECLARE c3 CURSOR FOR s3;
  EMB_SQL_CHECK("declare -- cusrsor");
  
  EXEC SQL OPEN c3;
  EMB_SQL_CHECK("cursor -- open");
  
  EXEC SQL FETCH c3 INTO :count, :xmlblob;
  EMB_SQL_CHECK("cursor -- fetch");

  /* print the result */
  printf("\nCOUNT   CUSTOMER NAME");
  while( sqlca.sqlcode == SQL_RC_OK )
  {
    xmlblob.data[xmlblob.length]='\0';
    printf("\n\n\n%d %s",count, xmlblob.data);
    EXEC SQL FETCH c3 INTO :count, :xmlblob;
    EMB_SQL_CHECK("cursor -- fetch");
  }
  EXEC SQL CLOSE c3;
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("cursor -- close");
  return 0;

} /* sortCust_PO */


int numPO(char *name, char *partid)
{
   int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  DECLARE CURSOR\n");
  printf("  OPEN\n");
  printf("  FETCH\n");
  printf("  CLOSE\n");
  printf("TO FIND OUT THE NUMBER OF PURCHASEORDER FOR CUSTOMER WITH A SPECIFIC PARTID");
  printf(" USING  SQL/XML QUERY\n");
  printf("\nCUSTOMER NAME: %s, PART ID: %s",name,partid);
  sprintf( stmt,"WITH cid_table AS (SELECT Cid FROM customer"
                   " WHERE XMLEXISTS('$custinfo/customerinfo[name=$name]'" 
                                 " PASSING customer.info AS \"custinfo\", cast(? as varchar(20)) as \"name\"))"
                " SELECT count(poid) FROM purchaseorder,cid_table"
                " WHERE XMLEXISTS('$po/itemlist/item[partid=$id]'"
                                 " PASSING purchaseorder.porder AS \"po\", cast(? as varchar(20)) as \"id\")"
                " AND purchaseorder.custid=cid_table.cid");


  printf("\n%s",stmt);
  EXEC SQL PREPARE s4 FROM :stmt;
  EMB_SQL_CHECK("prepare -- statement");
 
  EXEC SQL DECLARE c4 CURSOR FOR s4;
  EMB_SQL_CHECK("declare -- cusrsor");
  
  EXEC SQL OPEN c4 using :name,:partid;
  EMB_SQL_CHECK("cursor -- open");
    
  EXEC SQL FETCH c4 INTO :count;
  EMB_SQL_CHECK("cursor -- fetch");
  xmlblob.data[xmlblob.length]='\0'; 
  printf("\n\n\n COUNT : %d \n",count);
  
  EXEC SQL CLOSE c4;
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("cursor -- close");
  return 0;

} /* numPO */


