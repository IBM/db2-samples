/****************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SOURCE FILE NAME: xpath.sqc
**
** SAMPLE: How to run queries with a simple path expression 
**
** SQL/XML FUNCTIONS USED
**          xmlcolumn
**          sqlquery
**
** XQuery functions used
**          count
**          avg
**          start-with
**          distinct-values
**
** OUTPUT FILE: xpath.out (available in the online documentation)
*****************************************************************************
**
** For more information about the command line processor (CLP) scripts,
** see the README file.
**
** For information on using XQUERY statements, see the XQUERY Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**    http://www.software.ibm.com/data/db2/udb/ad
*****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlcodes.h>
#include <sqlutil.h>
#include "utilemb.h"

EXEC SQL BEGIN DECLARE SECTION;
  char stmt[16384];
  SQL TYPE IS XML AS BLOB( 10K ) xmlblob;
  SQL TYPE IS XML AS BLOB( 10K ) xmlblob2;  
  sqlint32 num;
EXEC SQL END DECLARE SECTION;

/* The CustomerDetails method returns all of the XML data in the INFO column of the CUSTOMER table */
int CustomerDetails(void);

/* The CustomerFromToronto method returns information about customers from Toronto */
int CustomerFromToronto(void);

/* The CitiesInCanada method returns a list of cities that are in Canada */
int CitiesInCanada(void);

/* The NumOfCustInToronto method returns the number of customer from Toronto city */
int NumOfCustInToronto(void);

/* The CustMobileNum method returns the names of customers whose mobile number starts with 905 */
int CustMobileNum(void);

/* The AvgPRice method determines the average prive of the products in the 100 series */
int AvgPrice(void);


int main(int argc, char *argv[])
{
  int rc = 0;
  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];

  /* check the command line arguments */
  rc = CmdLineArgsCheck1(argc, argv, dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }
  printf("\nXQUERY STATEMENT CANNOT BE EXECUTED STATICALLY.");
  printf("\nTO EMBED AN XQUERY STATEMENT, APPLICATION SHOULD MAKE USE OF DYNAMIC SQL LIKE");
  printf("\n PREPARE, DECLARE CURSOR, OPEN AND FETCH STATEMENT"); 
  printf("OR XMLQUERY FUNCTION WHICH");
  printf("\nCAN BE EMBEDDED STATICALLY\n");

  printf("\nTHIS SAMPLE DEMONSTRATES HOW THE QUERIES WTH  PATH EXPRESSION CAN BE EMBEDDED");
  printf("\n INTO THE APPLICATION");
 
  /* connect to database */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
  {
    return rc;
  }

  /* the following function will make use of DYNAMIC statements to run the path expression*/ 
  rc=CustomerDetails();
  rc=CitiesInCanada();
  rc=AvgPrice(); 

  /* the following function will make use of XMLQUERY function to run the path expression */
  rc=CustomerFromToronto();
  rc= NumOfCustInToronto();
  rc=CustMobileNum();
  return 0;
} /* main */
int CustomerDetails()
{
  int rc = 0;
  struct sqlca sqlca;
  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  DECLARE CURSOR\n");
  printf("  OPEN\n");
  printf("  FETCH\n");
  printf("  CLOSE\n");
  printf("TO SELECT CUSTOMER DETAILS USING PATH EXPRESSION.\n");

  printf("\nXQUERY for $cust in db2-fn:xmlcolumn('CUSTOMER.INFO')/customerinfo");
  printf("\n order by xs:double($cust/@Cid)");
  printf("\n return $cust");
  sprintf( stmt, "XQUERY for $cust in db2-fn:xmlcolumn('CUSTOMER.INFO')/customerinfo"
                  " order by xs:double($cust/@Cid)"
                  " return $cust");


  EXEC SQL PREPARE s1 FROM :stmt;
  EMB_SQL_CHECK("prepare -- statement");
  EXEC SQL DECLARE c1 CURSOR FOR s1;
  EMB_SQL_CHECK("declare -- cusrsor");
  EXEC SQL OPEN c1;
  EMB_SQL_CHECK("cursor -- open");
 
  EXEC SQL FETCH c1 INTO :xmlblob;
  EMB_SQL_CHECK("cursor -- fetch");

  while( sqlca.sqlcode == SQL_RC_OK )
  {
    /* Display results */
    xmlblob.data[xmlblob.length]='\0'; 
    printf("\n\n\n%s",xmlblob.data); 
    EXEC SQL FETCH c1 INTO :xmlblob;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  EXEC SQL CLOSE c1;
  EMB_SQL_CHECK("cursor -- close");
  return 0;
} /* CustomerDetails */

int CustomerFromToronto()
{
  int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************"); 
  printf("\n\nUSE THE XMLQUERY FUNCTION IN SELECT STATEMENT TO FIND OUT THE CUSTOMER");
  printf("\nDETAILS FROM TORONTO CITY");
  printf("\n\nDECLARE C2 CURSOR FOR SELECT XMLQUERY(");
  printf("\n'db2-fn:xmlcolumn(\"CUSTOMER.INFO\")/customerinfo[addr/city=\"Toronto\"]'");
  printf("RETURNING SEQUENCE BY REF) from SYSIBM.SYSDUMMY1");
 
  sprintf( stmt, "XQUERY for $cust in db2-fn:xmlcolumn(\"CUSTOMER.INFO\")/customerinfo[addr/city=\"Toronto\"]"
                  " order by $cust/@Cid"
                  " return $cust");

  EXEC SQL PREPARE s5 FROM :stmt;
  EMB_SQL_CHECK("prepare -- statement"); 
  EXEC SQL DECLARE C2 CURSOR FOR s5; 
  EXEC SQL OPEN c2;
  EMB_SQL_CHECK("cursor -- open");

  EXEC SQL FETCH c2 INTO :xmlblob;
  EMB_SQL_CHECK("cursor -- fetch");

  while( sqlca.sqlcode == SQL_RC_OK )
  {
    /* Display results */
    xmlblob.data[xmlblob.length]='\0';
    printf("\n\n\n%s",xmlblob.data);
    EXEC SQL FETCH c2 INTO :xmlblob;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  EXEC SQL CLOSE c2;
} /* CustomerFromToronto */


int CitiesInCanada()
{
  int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  DECLARE CURSOR\n");
  printf("  OPEN\n");
  printf("  FETCH\n");
  printf("  CLOSE\n");
  printf("TO SELECT CUSTOMERS CITIES IN CANDA USING SIMPLE PATH EXPRESSION\n");

  printf("\nXQUERY for $cty in fn:distinct-values(db2-fn:xmlcolumn('CUSTOMER.INFO')");
  printf("\n/customerinfo/addr[@country=\"Canada\"]/city)");
  printf("\norder by $cty");
  printf("\nreturn $cty");
  sprintf( stmt, "XQUERY for $cty in fn:distinct-values(db2-fn:xmlcolumn('CUSTOMER.INFO')"
                  "/customerinfo/addr[@country=\"Canada\"]/city) "
                  "order by $cty "
                  "return $cty");


  EXEC SQL PREPARE s3 FROM :stmt;
  EMB_SQL_CHECK("prepare -- statement");
  EXEC SQL DECLARE c3 CURSOR FOR s3;
  EMB_SQL_CHECK("declare -- cusrsor");
  EXEC SQL OPEN c3;
  EMB_SQL_CHECK("cursor -- open");

  EXEC SQL FETCH c3 INTO :xmlblob;
  EMB_SQL_CHECK("cursor -- fetch");

  while( sqlca.sqlcode == SQL_RC_OK )
  {
    /* Display results */
    xmlblob.data[xmlblob.length]='\0';
    printf("\n\n\n%s",xmlblob.data);
    EXEC SQL FETCH c3 INTO :xmlblob;
    EMB_SQL_CHECK("cursor -- fetch");
  }
  
  EXEC SQL CLOSE c3;
  EMB_SQL_CHECK("cursor -- close");
  return 0;

} /* CitiesInCanada */

int NumOfCustInToronto()
{
  int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************");
  printf("\n\nUSE THE XMLQUERY FUNCTION IN SELECT STATEMENT TO FIND OUT THE CUSTOMER");
  printf("\nNUMBER OF CUSTOMER IN TORONTO CITY");
  printf("\n XQUERY FUNCTION COUNT WILL BE USED TO COUNT THE NUMBER OF CUSTOMER");
  printf("\n\nDECLARE C4 CURSOR FOR XMLCAST(SELECT XMLQUERY(");
  printf("\n'fn:count(db2-fn:xmlcolumn('CUSTOMER.INFO')/customerinfo[addr/city=\"Toronto\"])'");
  printf("RETURNING SEQUENCE BY REF) as INTEGER) from SYSIBM.SYSDUMMY1");
  EXEC SQL DECLARE c4 CURSOR FOR SELECT XMLCAST(XMLQUERY(
                       'fn:count(db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo[addr/city="Toronto"])'
                RETURNING SEQUENCE BY REF) as INTEGER) from SYSIBM.SYSDUMMY1;
  EXEC SQL OPEN c4;
  EMB_SQL_CHECK("cursor -- open");
  EXEC SQL FETCH c4 INTO :num;
  EMB_SQL_CHECK("cursor -- fetch");
  printf("\n NUMBER OF CUSTOMER = %d",num);
  /* Display results */

  EXEC SQL CLOSE c4;

} /* NumOfCustInToronto */

int CustMobileNum()
{
  int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************");
  printf("\n\nUSE THE XMLQUERY FUNCTION IN SELECT STATEMENT TO FIND OUT THE CUSTOMER");
  printf("\nDETAILS WHOSE NUMBER STARTS WITH 905");
  printf("\n\nDECLARE C5 CURSOR FOR SELECT XMLQUERY(");
  printf("\n'db2-fn:xmlcolumn(\"CUSTOMER.INFO\")/customerinfo[phone[@type=\"cell\" "); 
  printf(" and fn:starts-with(text(),\"905\")]]");
  printf("RETURNING SEQUENCE BY REF) from SYSIBM.SYSDUMMY1");
  EXEC SQL DECLARE C5 CURSOR FOR SELECT XMLQUERY(
                'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo[phone[@type="cell" and fn:starts-with(text(),"905")]]'
                RETURNING SEQUENCE BY REF) from SYSIBM.SYSDUMMY1;
  EXEC SQL OPEN c5;
  EMB_SQL_CHECK("cursor -- open");

  EXEC SQL FETCH c5 INTO :xmlblob;
  EMB_SQL_CHECK("cursor -- fetch");

  while( sqlca.sqlcode == SQL_RC_OK )
  {
    /* Display results */
    xmlblob.data[xmlblob.length]='\0';
    printf("\n\n\n%s",xmlblob.data);
    EXEC SQL FETCH c5 INTO :xmlblob;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  EXEC SQL CLOSE c5;
} /* CustMobileNum */

int AvgPrice()
{
  int rc = 0;
  struct sqlca sqlca;
  printf("\n*******************************************************************************");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  DECLARE CURSOR\n");
  printf("  OPEN\n");
  printf("  FETCH\n");
  printf("  CLOSE\n");
  printf("TO SELECT AVERAGE PRICE FOR ALL THE PRODUCTS IN 100 SERIES USING PATH EXPRESSION\n");
  printf("\nXQUERY let $prod_price := db2-fn:xmlcolumn('PRODUCT.DESCRIPTION')");
  printf("/product[fn:starts-with(@pid,\"100\")]/description/price");
  printf(" return avg($prod_price)");
  sprintf( stmt, "XQUERY let $prod_price := db2-fn:xmlcolumn('PRODUCT.DESCRIPTION')"
                 "/product[fn:starts-with(@pid,\"100\")]/description/price"
                 " return avg($prod_price)");


  EXEC SQL PREPARE s6 FROM :stmt;
  EMB_SQL_CHECK("prepare -- statement");
  EXEC SQL DECLARE c6 CURSOR FOR s6;
  EMB_SQL_CHECK("declare -- cusrsor");
  EXEC SQL OPEN c6;
  EMB_SQL_CHECK("cursor -- open");
  EXEC SQL FETCH c6 INTO :xmlblob;
  EMB_SQL_CHECK("cursor -- fetch");
  xmlblob.data[xmlblob.length]='\0';
  printf("\n\n\n%s",xmlblob.data);
  /* Display results */

  EXEC SQL CLOSE c6;
  EMB_SQL_CHECK("cursor -- close");
  return 0;

} /* AvgPrice */ 
