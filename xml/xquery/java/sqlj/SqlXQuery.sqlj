/***************************************************************************
// (c) Copyright IBM Corp. 2007 All rights reserved.
// 
// The following sample of source code ("Sample") is owned by International 
// Business Machines Corporation or one of its subsidiaries ("IBM") and is 
// copyrighted and licensed, not sold. You may use, copy, modify, and 
// distribute the Sample in any form without payment to IBM, for the purpose of 
// assisting you in the development of your applications.
// 
// The Sample code is provided to you on an "AS IS" basis, without warranty of 
// any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
// IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
// not allow for the exclusion or limitation of implied warranties, so the above 
// limitations or exclusions may not apply to you. IBM shall not be liable for 
// any damages you suffer as a result of using, copying, modifying or 
// distributing the Sample, even if IBM has been advised of the possibility of 
// such damages.
//***************************************************************************
//
// SOURCE FILE NAME: SqlXQuery.sqlj
//
// SAMPLE: How to run SQL/XML Queries
//
// SQL Statements USED:
//         SELECT
//
// SQL/XML STATEMENTS USED:
//                XMLQUERY
//                XMLEXISTS
//
//
// OUTPUT FILE: SqlXQuery.out (available in the online documentation)
//***************************************************************************
//
// For more information on the sample programs, see the README file.
//
// For information on developing JDBC applications, see the Application
// Development Guide.
//
// For information on using SQL statements, see the SQL Reference.
//
// For the latest information on programming, compiling, and running DB2
// applications, visit the DB2 application development website at
//     http://www.software.ibm.com/data/db2/udb/ad
//**************************************************************************/

import java.lang.*;
import java.sql.*;
import sqlj.runtime.*;
import sqlj.runtime.ref.*;


// Define the iterator to use in the functions
#sql iterator Positioned_Iterator1(Object);
#sql iterator Positioned_Iterator2(int,Object,Object,Object);
#sql iterator Positioned_Iterator3(int);
#sql iterator Positioned_Iterator4(int, Object);

class SqlXQuery 
{
  public static void main(String argv[])
  {
    int rc=0;
    String url = "jdbc:db2:sample";
    Connection con=null;
    DefaultContext ctx=null;
    String custName=null;
    String partID=null;

    try
    {
      Class.forName("com.ibm.db2.jcc.DB2Driver").newInstance();

      // connect to the 'sample' database
      con = DriverManager.getConnection( url );

      // select the default context
      ctx= new DefaultContext(con);

      // set the default context for the sample
      DefaultContext.setDefaultContext(ctx);
      System.out.println();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}

    System.out.println("---------------------------------------------------------------------------");
    custName="Robert Shoemaker";
    System.out.println("SELECT THE FIRST ITEM IN THE PURCHASEORDER FOR THE CUSTOMER "+custName+"......");
    System.out.println();
    firstPO1(custName);

    System.out.println("---------------------------------------------------------------------------");
    System.out.println("SELECT THE FIRST ITEM IN THE PURCHASEORDER WHEN THE CUSTOMER IS IN SEQUENCE (X,Y,Z)");
    System.out.println("  AND CUSTOMER ID IN THE SEQUENCE (1000,1002,1003)   ........");
    System.out.println();
    firstPO2();

    System.out.println("--------------------------------------------------------------------------");
    System.out.println("SORT THE CUSTOMERS ACCORDING TO THE NUMBER OF PURCHASEORDERS...........");
    System.out.println();
    sortCust_PO();

    System.out.println("---------------------------------------------------------------------------");
    partID="100-101-01";
    System.out.println("SELECT THE NUMBER OF PURCHASEORDER FOR THE CUSTOMER "+custName+" HAVING THE");
    System.out.println(" PARTID " + partID +"......");
    System.out.println();
    numPO(custName, partID);

  } //main

  // This function will find out the first item in the purchase order for customer
  // The name of the customer is passed as an argument to the function
  static void firstPO1(String custName)
  {
  try
    {
      Object data=null;

      // declare an iterator
      Positioned_Iterator1 custIter=null;

     // Run the query with default context
     #sql custIter = {SELECT XMLQUERY('$p/PurchaseOrder/item[1]' PASSING p.porder AS "p")
            FROM purchaseorder AS p, customer AS c
            WHERE XMLEXISTS('$custinfo/customerinfo[name=$c and @Cid = $cid]'
            PASSING c.info AS "custinfo", p.custid AS "cid", cast(:custName as varchar(20)) as "c")};

      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :data};

        if (custIter.endFetch())
        {
          break;
        }
        // print the result as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      // close the cursor
      custIter.close();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
    catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // firstPO1

  // This function will find out the first item in the purchaseorder when
  // Name is from the sequence
  // or the customer id is from the sequence (1000,1002,1003)
  static void firstPO2()
  {
  try
    {
      Object data=null;
      int cid=0;
      Object name=null;
      Object history=null;

      // declare an iterator
      Positioned_Iterator2 custIter=null;

     // Run the query with default context
     #sql custIter = {SELECT cid, XMLQUERY('$custinfo/customerinfo/name' passing c.info as "custinfo"),
                  XMLQUERY('$p/PurchaseOrder/item[1]' passing p.porder as "p"),
                  XMLQUERY('$x/history' passing c.history as "x")
                   FROM purchaseorder as p,customer as c
                   WHERE XMLEXISTS('$custinfo/customerinfo[name=(X,Y,Z)
                   or @Cid=(1000,1002,1003) and @Cid=$cid ]'
                   PASSING c.info AS "custinfo", p.custid AS "cid") ORDER BY cid};

      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :cid,:name,:data,:history};

        if (custIter.endFetch())
        {
          break;
        }
        
        System.out.println();
        
        // Print the customer id 
        System.out.println("Cid: " +cid);
        
        // Print the name as DB2 String
        System.out.println("NAME: " +((com.ibm.db2.jcc.DB2Xml)name).getDB2String());
        
        // Print the first item in the purchaseorder as DB2 XML String
        System.out.println("First Item in the purchaseorder: " +((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
        // Print the history of the customer as DB2 XML String
        System.out.println("History: " +((com.ibm.db2.jcc.DB2Xml)history).getDB2XmlString()); 
      }

      // close the cursor
      custIter.close();

    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // firstPO2 
  static void numPO(String custName, String partID) 
  {
   try
    {
      int count=0;
      // declare an iterator
      Positioned_Iterator3 custIter=null;

     // Run the query with default context
     #sql custIter = {WITH cid_table AS (SELECT Cid FROM customer
                 WHERE XMLEXISTS('$custinfo/customerinfo[name=$name]'
                                   PASSING customer.info AS "custinfo", cast(:custName as varchar(20)) as "name"))
                 SELECT count(poid) FROM purchaseorder,cid_table
                 WHERE XMLEXISTS('$po/PurchaseOrder/item[partid=$id]'
                                   PASSING purchaseorder.porder AS "po", cast(:partID as varchar(20)) as "id")
                 AND purchaseorder.custid=cid_table.cid}; 

        // fetch the cursor
        #sql {FETCH :custIter INTO :count};      
        
        // print the result
        System.out.println();
        System.out.println("Number of purchaseorder with partid "+partID+" for customer "+custName+" :"+ count);

      // close the cursor
      custIter.close();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
    catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
 
  } // numPO
  
  static void sortCust_PO()
  {
  try
    {
      Object data=null;
      int count=0;

      // declare an iterator
      Positioned_Iterator4 custIter=null;

     // Run the query with default context
     #sql custIter = {WITH count_table AS ( SELECT count(poid) as c,custid 
                                            FROM purchaseorder,customer 
                                            WHERE cid=custid group by custid ) 
                    SELECT c, xmlquery('$s/customerinfo[@Cid=$id]/name' passing customer.info as "s",
                                       count_table.custid as "id") 
                    FROM customer,count_table WHERE custid=cid ORDER BY custid};

      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO  :count, :data};

        if (custIter.endFetch())
        {
          break;
        }
        // print the result as an XML string
        System.out.println();
        System.out.println("Count :"+count+"  Name :"+ ((com.ibm.db2.jcc.DB2Xml)data).getDB2String());
      }

      // close the cursor
      custIter.close();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
    catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
    
  } // sortCust_PO 
} // SqlXQuery 
