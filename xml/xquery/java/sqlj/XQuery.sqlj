//***************************************************************************
// (c) Copyright IBM Corp. 2007 All rights reserved.
// 
// The following sample of source code ("Sample") is owned by International 
// Business Machines Corporation or one of its subsidiaries ("IBM") and is 
// copyrighted and licensed, not sold. You may use, copy, modify, and 
// distribute the Sample in any form without payment to IBM, for the purpose of 
// assisting you in the development of your applications.
// 
// The Sample code is provided to you on an "AS IS" basis, without warranty of 
// any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
// IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
// not allow for the exclusion or limitation of implied warranties, so the above 
// limitations or exclusions may not apply to you. IBM shall not be liable for 
// any damages you suffer as a result of using, copying, modifying or 
// distributing the Sample, even if IBM has been advised of the possibility of 
// such damages.
//***************************************************************************
//
// SOURCE FILE NAME: XQuery.sqlj
//
// SAMPLE: How to run a nested XQuery and shows how to pass parameters to 
//         sqlquery function.
//
// SQL/XML FUNCTIONS USED:
//         sqlquery
//         xmlcolumn
//
// XQUERY EXPRESSION USED
//         FLWOR Expression
//
// OUTPUT FILE: XQuery.out (available in the online documentation)
//***************************************************************************
//
// For more information on the sample programs, see the README file.
//
// For information on developing JDBC applications, see the Application
// Development Guide.
//
// For information on using XQUERY statements, see the XQUERY Reference.
//
// For the latest information on programming, compiling, and running DB2
// applications, visit the DB2 application development website at
//     http://www.software.ibm.com/data/db2/udb/ad
//**************************************************************************/

import java.lang.*;
import java.sql.*;
import java.io.*;
import java.util.*;
import com.ibm.db2.jcc.DB2Xml;
import sqlj.runtime.*;
import sqlj.runtime.ref.*;

// Define the iterator to use in the functions
#sql iterator Positioned_Iterator1(Object);
#sql iterator Positioned_Iterator2(Object);

class XQuery
{

   public static void main(String argv[])
  {
    int rc=0;
    String url = "jdbc:db2:sample";
    Connection con=null;
    DefaultContext ctx=null;

    try
    {
      Class.forName("com.ibm.db2.jcc.DB2Driver").newInstance();

      // connect to the 'sample' database
      con = DriverManager.getConnection( url );

      // select the default context
      ctx= new DefaultContext(con);

      // set the default context for the sample
      DefaultContext.setDefaultContext(ctx);
      System.out.println();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
   System.out.println("-------------------------------------------------------------");
   System.out.println("RESTRUCTURE THE PURCHASEORDERS ACCORDING TO THE CITY....");
   System.out.println();
   PO_OrderByCity();

   System.out.println("-------------------------------------------------------------");
   System.out.println("RESTRUCTURE THE PURCHASEORDER ACCORDING TO THE PRODUCT.....");
   System.out.println();
   CustomerOrderByProduct();

   System.out.println("-------------------------------------------------------------");
   System.out.println("RESTRUCTURE THE PURCHASEORDER DATA ACCORDING TO PROVIENCE, CITY AND STREET..");
   System.out.println();
   PO_OrderByProvCityStreet();
   
   System.out.println("-------------------------------------------------------------");
   System.out.println("COMBINE THE DATA FROM PRODUCT AND CUSTOMER TABLE TO CREATE A PURCHASEORDER..");
   CustomerPO(); 

  } // main

  static void PO_OrderByCity()
  {
  try
    {
      Object data=null;

      // declare an iterator
      Positioned_Iterator1 custIter=null;
      Positioned_Iterator2 custIter1=null;

     // Run the query with default context
     #sql custIter = {select XMLQUERY('for $city in fn:distinct-values(db2-fn:xmlcolumn("CUSTOMER.INFO") 
                     /customerinfo/addr/city)
                     order by $city      
                     return <city name="{$city}">
                      {
                       for  $cust in db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo[addr/city=$city] 
                       let $po:=db2-fn:sqlquery("SELECT XMLELEMENT( NAME ""pos"", 
                                                          (XMLCONCAT( XMLELEMENT(NAME ""custid"", c.custid),
                                                                      XMLELEMENT(NAME ""order"", c.porder)))) 
                                                FROM purchaseorder AS c") 
                       let $id:=$cust/@Cid, 
                       $order:=$po/pos[custid=$id]/order
                       order by $cust/@Cid 
                       return <customer id="{$id}">  {$cust/name} {$cust/addr} {$order} </customer>} </city>') FROM 
                       sysibm.sysdummy1};
      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :data};

        if (custIter.endFetch())
        {
          break;
        }
        // print the result as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      System.out.println("\n\nThe following query shows how to pass parameters to sqlquery function");
      System.out.println("-------------------------------------------------------------------------");

      #sql custIter1 = {SELECT XMLQUERY('
              for $city in fn:distinct-values(db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo/addr/city)
              order by $city
              return
                <city name="{$city}">
                {
                   for  $cust in db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo[addr/city=$city]
                   let $po:=db2-fn:sqlquery("SELECT porder FROM PURCHASEORDER WHERE custid=parameter(1)",$cust/@Cid)
                       let $order:=$po/order
                    order by $cust/@Cid
                    return
                    <customer id = "{$cust/@Cid}">
                      {$cust/name}
                      {$cust/Addr}
                      {$order}
                      </customer>}
                 </city>') FROM SYSIBM.SYSDUMMY1};

      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter1 INTO :data};

        if (custIter1.endFetch())
        {
          break;
        }
        // print the result as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      // close the cursor
      custIter.close();
      custIter1.close();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
    catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // PO_OrderByCity
  
  static void CustomerOrderByProduct()
  {
   try
    {
      Object data=null;

      // declare an iterator
      Positioned_Iterator1 custIter=null;

     // Run the query with default context
     #sql custIter = {select xmlquery ('let $po:=db2-fn:sqlquery("SELECT XMLELEMENT( NAME ""pos"",
                                                               ( XMLCONCAT( XMLELEMENT(NAME ""custid"", c.custid),
                                                                            XMLELEMENT(NAME ""order"", c.porder) ) )) 
                                               FROM purchaseorder AS c" ) 
                      for $partid in fn:distinct-values(db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder/item/partid) 
                      order by $partid
                        return <Product name="{$partid}"> 
                               <Customers>
                                  { for  $id in fn:distinct-values($po[order/PurchaseOrder/item/partid=$partid]/custid) 
                                    let  $order:=<quantity> 
                                             {fn:sum($po[custid=$id]/order/PurchaseOrder/item[partid=$partid]/quantity)} 
                                         </quantity>, 
                                        $cust:=db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo[@Cid=$id] 
                                    order by $id
                                    return <customer id="{$id}"> {$order} {$cust} </customer> } 
                                 </Customers>
                                 </Product>') FROM SYSIBM.SYSDUMMY1
                                  }; 
      
      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :data};

        if (custIter.endFetch())
        {
          break;
        }
        // print the result as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      // close the cursor
      custIter.close();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } // CustomerOrderByProduct
  
  static void PO_OrderByProvCityStreet()
  {
  try
    {
      Object data=null;

      // declare an iterator
      Positioned_Iterator1 custIter=null;

     // Run the query with default context
     #sql custIter = {select xmlquery ('let $po:=db2-fn:sqlquery("SELECT XMLELEMENT( NAME ""pos"",
                                          ( XMLCONCAT( XMLELEMENT(NAME ""custid"", c.custid),
                                          XMLELEMENT(NAME ""order"", c.porder)
                                                       ) ))
                                            FROM PURCHASEORDER as c ORDER BY poid"),
        $addr:=db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo/addr
        for $prov in distinct-values($addr/prov-state)
        return
        <province name="{$prov}">
        {
          for $city in fn:distinct-values($addr[prov-state=$prov]/city)
          order by $city
          return
          <city name="{$city}">
          {
            for $s in fn:distinct-values($addr/street) where $addr/city=$city
            order by $s
            return
            <street name="{$s}">
            {
              for $info in $addr[prov-state=$prov and city=$city and street=$s]/..
              order by $info/@Cid
              return
              <customer id="{$info/@Cid}">
              {$info/name}
              {
                let $id:=$info/@Cid, $order:=$po[custid=$id]/order
                return $order
              }
             </customer>
            }
            </street>
          }
          </city>
        }
        </province>') FROM SYSIBM.SYSDUMMY1};

      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :data};

        if (custIter.endFetch())
        {
          break;
        }
        // print the result as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      // close the cursor
      custIter.close();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  } //PO_OrderByProvCityStreet


  static void CustomerPO()
  {
  try
    {
      Object data=null;

      // declare an iterator
      Positioned_Iterator1 custIter=null;

     // Run the query with default context
     #sql custIter = {select xmlquery ('<PurchaseOrder>
                    {
                         for $ns1_customerinfo0 in db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo
                         where ($ns1_customerinfo0/@Cid=1001)
                         return
                         <customer customerid="{ fn:string( $ns1_customerinfo0/@Cid)}">
                         {$ns1_customerinfo0/name}
                             <address>
                               {$ns1_customerinfo0/addr/street}
                               {$ns1_customerinfo0/addr/city}
                               {
                                  if($ns1_customerinfo0/addr/@country="US")
                                  then
                                  $ns1_customerinfo0/addr/prov-state
                                  else()
                               }
                               {
                    fn:concat ($ns1_customerinfo0/addr/pcode-zip/text(),",",fn:upper-case($ns1_customerinfo0/addr/@country
                            ))}
                            </address>
                           </customer>
                         }
                         {
                          for $ns2_product0 in db2-fn:xmlcolumn("PRODUCT.DESCRIPTION")/product
                          where ($ns2_product0/@pid="100-100-01")
                          return
                          $ns2_product0
                      }
                    </PurchaseOrder>') FROM SYSIBM.SYSDUMMY1};

 
      while (true)
      {
        // fetch the cursor
        #sql {FETCH :custIter INTO :data};

        if (custIter.endFetch())
        {
          break;
        }
        // print the result as an XML string
        System.out.println();
        System.out.println(((com.ibm.db2.jcc.DB2Xml)data).getDB2XmlString());
      }

      // close the cursor
      custIter.close();
    }
    catch(SQLException sqle)
    {
      System.out.println("Error Msg: "+ sqle.getMessage());
      System.out.println("SQLState: "+sqle.getSQLState());
      System.out.println("SQLError: "+sqle.getErrorCode());
      System.out.println("Rollback the transaction and quit the program");
      System.out.println();
      try { DefaultContext.getDefaultContext().getConnection().rollback(); }
      catch (Exception e)
      {
      }
      System.exit(1);
    }
    catch(Exception e)
    {}
  }// CustomerPO
} // XQuery 
