//***************************************************************************
// (c) Copyright IBM Corp. 2007 All rights reserved.
// 
// The following sample of source code ("Sample") is owned by International 
// Business Machines Corporation or one of its subsidiaries ("IBM") and is 
// copyrighted and licensed, not sold. You may use, copy, modify, and 
// distribute the Sample in any form without payment to IBM, for the purpose of 
// assisting you in the development of your applications.
// 
// The Sample code is provided to you on an "AS IS" basis, without warranty of 
// any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
// IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
// not allow for the exclusion or limitation of implied warranties, so the above 
// limitations or exclusions may not apply to you. IBM shall not be liable for 
// any damages you suffer as a result of using, copying, modifying or 
// distributing the Sample, even if IBM has been advised of the possibility of 
// such damages.
//***************************************************************************
//
// SOURCE FILE NAME: UDFjcli.sqlj
//
// SAMPLE: Call the UDFs in UDFjsrv.java
//
//         Parameter Style used in this program is "JAVA".
//
//         Steps to run the sample with command line window:
//         I) If you have a compatible make/nmake program on your system, 
//            do the following:
//            1. Update makefile with a valid (userid,) password and
//               an available port number.
//            2. Compile the server source file UDFjsrv.java (this will also 
//               compile the Utility file, Util.sqlj, erase the existing 
//               library/class file and copy the newly compiled class file,
//               UDFjsrv.class from the current directory to the 
//               $(DB2PATH)\function directory):
//                 nmake/make UDFjsrv
//            3. Compile the client source file UDFcli (this will also call
//               the script 'udfjcat' to create and catalog the UDFs):
//                 nmake/make UDFjcli
//            4. Run the client UDFjcli:
//                 java UDFjcli
//
//         II) If you don't have a compatible make/nmake program on your 
//             system, do the following:
//             1. Compile the server source file with the following command:
//                  javac UDFjsrv.java
//             2. Erase the existing library/class files (if exists), 
//                UDFsrv.class from the $(DB2PATH)\function directory.
//             3. copy the class files, UDFsrv.class from the current
//                directory to the $(DB2PATH)\function.
//             4. Register/catalog the UDFs with:
//                  udfjcat
//             5. Compile the utility file with the following command:
//                  sqlj Util.sqlj
//             6. Update bldsqljs and bldsqlj build files with a valid userid
//                and password.
//             7. Build the SQLj UDFs with with:
//                  bldsqlj UDFjcli
//             8. Run UDFcli with:
//                  java UDFjcli
//
// SQL Statements USED:
//         FETCH
//         SELECT
//
// OUTPUT FILE: UDFjcli.out (available in the online documentation)
// Output will vary depending on the JDBC driver connectivity used.
//***************************************************************************
//
// For more information on the sample programs, see the README file.
//
// For information on developing SQLJ applications, see the Application
// Development Guide.
//
// For information on using SQL statements, see the SQL Reference.
//
// For the latest information on programming, compiling, and running DB2
// applications, visit the DB2 application development website at
//     http://www.software.ibm.com/data/db2/udb/ad
//**************************************************************************/

import java.sql.*; // JDBC classes
import sqlj.runtime.*;
import sqlj.runtime.ref.*;

#sql iterator CursorForScalarUDF(String, String, double, double);

class UDFjcli
{
  public static void main(String argv[])
  {
    try
    {
      Db db = new Db(argv);

      System.out.println();
      System.out.println("THIS SAMPLE SHOWS HOW TO WORK WITH UDFs.");

      // connect database
      db.getDefaultContext();

      demoExternalScalarUDF();
    }
    catch (Exception e)
    {
      SqljException sqljExc = new SqljException(e);
      sqljExc.handle();
    }
  } // main

  static void demoExternalScalarUDF()
  {
    try
    {
      System.out.println();
      System.out.println(
        "----------------------------------------------------------\n" +
        "USE THE SQL STATEMENTS:\n" +
        "  SELECT\n" +
        "TO WORK WITH SCALAR UDF.");

      // use scalar UDF
      System.out.println();
      System.out.println(
        "  Use the scalar UDF:\n" +
        "    SELECT name, job, salary, scalarUDF(job, salary)\n" +
        "      FROM staff\n" +
        "      WHERE name LIKE 'S%'");

      CursorForScalarUDF cur;
      String name = null;
      String job = null;
      double salary = 0.0;
      double newSalary = 0.0;

      #sql cur = {SELECT name, job, salary, scalarUDF(job, salary)
                    FROM staff
                    WHERE name LIKE 'S%'};

      System.out.println();
      System.out.println("    NAME       JOB     SALARY   NEW_SALARY\n" +
                         "    ---------- ------- -------- ----------");

      #sql {FETCH :cur INTO :name, :job, :salary, :newSalary};

      while (!cur.endFetch())
      {
        System.out.println("    " + Data.format(name, 10) +
                           " " + Data.format(job, 7) +
                           " " + Data.format(salary, 7, 2) +
                           " " + Data.format(newSalary, 7, 2));

        #sql {FETCH :cur INTO :name, :job, :salary, :newSalary};
      }
      cur.close();
    }
    catch (Exception e)
    {
      SqljException sqljExc = new SqljException(e);
      sqljExc.handle();
    }
  } // demoExternalScalarUDF


} // UDFjcli

