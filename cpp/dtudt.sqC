/****************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SOURCE FILE NAME: dtudt.sqC 
**    
** SAMPLE: How to create, use, and drop user-defined distinct types 
**           
** SQL STATEMENTS USED:
**         CREATE DISTINCT TYPE 
**         EXECUTE IMMEDIATE
**         DROP
**
** OUTPUT FILE: dtudt.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C++ applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, compiling, and running DB2
** applications, visit the DB2 application development website at
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"
#if ((__cplusplus >= 199711L) && !defined DB2HP && !defined DB2AIX) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iostream>
   using namespace std; 
#else
   #include <iostream.h>
#endif

EXEC SQL BEGIN DECLARE SECTION;
  char strStmt[257];
EXEC SQL END DECLARE SECTION;

class DtUdt
{
  public:
    int Create();
    int Use();
    int Drop();
};

int DtUdt::Create()
{
  struct sqlca sqlca;

  cout << "\n-----------------------------------------------------------";
  cout << "\nUSE THE SQL STATEMENTS:" << endl;
  cout << "  CREATE DISTINCT TYPE" << endl;
  cout << "  COMMIT" << endl;
  cout << "TO CREATE UDTs." << endl;

  cout << endl;
  cout << "  CREATE DISTINCT TYPE udt1 AS INTEGER WITH COMPARISONS" << endl;

  EXEC SQL CREATE DISTINCT TYPE udt1 AS INTEGER WITH COMPARISONS;
  EMB_SQL_CHECK("udt1 -- create");

  cout << "  CREATE DISTINCT TYPE udt2 AS CHAR(2) WITH COMPARISONS" << endl;

  EXEC SQL CREATE DISTINCT TYPE udt2 AS CHAR(2) WITH COMPARISONS;
  EMB_SQL_CHECK("udt2 -- create");

  cout << "  CREATE DISTINCT TYPE udt3 AS DECIMAL(7, 2) WITH COMPARISONS"
       << endl;

  EXEC SQL CREATE DISTINCT TYPE udt3 AS DECIMAL(7, 2) WITH COMPARISONS;
  EMB_SQL_CHECK("udt3 -- create");

  cout << "  COMMIT" << endl;

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  return 0;
} //DtUdt::Create

int DtUdt::Use()
{
  struct sqlca sqlca;

  cout << "\n-----------------------------------------------------------";
  cout << "\nUSE THE SQL STATEMENTS:" << endl;
  cout << "  CREATE TABLE" << endl;
  cout << "  INSERT" << endl;
  cout << "  COMMIT" << endl;
  cout << "TO USE UTDs." << endl;

  // create udt_table
  cout << "\n  CREATE TABLE udt_table(col1 udt1, col2 udt2, col3 udt3)"
       << endl;

  strcpy(strStmt,
         "  CREATE TABLE udt_table(col1 udt1, col2 udt2, col3 udt3) ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("stmt -- execute immediate");

  cout << "  COMMIT" << endl;

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  // insert udt_table
  cout << "\n  INSERT INTO udt_table"
       << "\n    VALUES(CAST(77 AS udt1),"
       << "\n           CAST('ab' AS udt2),"
       << "\n           CAST(111.77 AS udt3))" << endl;

  strcpy(strStmt,
         "    INSERT INTO udt_table "
         "      VALUES(CAST(77 AS udt1), "
         "             CAST('ab' AS udt2), "
         "             CAST(111.77 AS udt3)) ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("stmt -- execute immediate");

  cout << "  COMMIT" << endl;

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  // drop udt_table
  cout << "\n  DROP TABLE udt_table" << endl;
  strcpy(strStmt, "  DROP TABLE udt_table ");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK("stmt -- execute immediate");

  cout << "  COMMIT" << endl;

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  return 0;
} //DtUdt::Use

int DtUdt::Drop()
{
  struct sqlca sqlca;

  cout << "\n-----------------------------------------------------------";
  cout << "\nUSE THE SQL STATEMENTS:" << endl;
  cout << "  DROP" << endl;
  cout << "  COMMIT" << endl;
  cout << "TO DROP UDTs." << endl;

  cout << "\n  DROP USER DISTINCT TYPE udt1" << endl;

  EXEC SQL DROP DISTINCT TYPE udt1;
  EMB_SQL_CHECK("udt1 -- drop");

  cout << "  DROP USER DISTINCT TYPE udt2" << endl;

  EXEC SQL DROP DISTINCT TYPE udt2;
  EMB_SQL_CHECK("udt2 -- drop");

  cout << "  DROP USER DISTINCT TYPE udt3" << endl;

  EXEC SQL DROP DISTINCT TYPE udt3;
  EMB_SQL_CHECK("udt3 -- drop");

  cout << "  COMMIT" << endl;

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("transaction -- commit");

  return 0;
} //DtUdt::Drop

int main(int argc, char *argv[])
{
  int rc = 0;
  CmdLineArgs check;
  DtUdt udt;
  DbEmb db;

  // check the command line arguments
  rc = check.CmdLineArgsCheck1(argc, argv, db);
  if (rc != 0)
  {
    return rc;
  }

  cout << "\nTHIS SAMPLE SHOWS HOW TO CREATE/USE/DROP UDTs." << endl;

  // connect to the database
  rc = db.Connect();
  if (rc != 0)
  {
    return rc;
  }

  rc = udt.Create();
  rc = udt.Use();
  rc = udt.Drop();

  // disconnect from the database
  rc = db.Disconnect();
  if (rc != 0)
  {
    return rc;
  }

  return 0;
} //main

