/****************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SOURCE FILE NAME: tbast.sqC
** 
** SAMPLE: How to use staging table for updating deferred AST 
**          
**         This sample:
**         1. Creates a refresh-deferred summary table 
**         2. Creates a staging table for this summary table 
**         3. Applies contents of staging table to AST
**         4. Restores the data in a summary table 
**
** SQL STATEMENTS USED:
**         CREATE TABLE
**         DROP
**         EXECUTE IMMEDIATE
**         INSERT
**         REFRESH
**         SET INTEGRITY
**
** STRUCTURES USED:
**         sqlca
**
** OUTPUT FILE: tbast.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C++ applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For information on DB2 APIs, see the Administrative API Reference.
**
** For the latest information on programming, compiling, and running DB2
** applications, visit the DB2 application development website at
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <sqlenv.h>
#include <sqlutil.h>
#include <string.h>
#include "utilemb.h"
#if ((__cplusplus >= 199711L) && !defined DB2HP && !defined DB2AIX) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iostream>
   using std::cout;
#else
   #include <iostream.h>
#endif

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
  char strStmt[100];
  short c1;
  short c2;
  short counter;
EXEC SQL END DECLARE SECTION;

class TbAst
{
  public:
    int CreateStagingTable(void);
    int PropagateStagingToAst(void);
    int RestoreSummaryTable(void);
    int DropTables(void);
  private:
    int DisplayTable(char *);
};

// Creates base table, summary table and staging table
int TbAst::CreateStagingTable(void)
{
  int rc =0;

  // create base table 
  cout << "\nUSE THE SQL STATEMENT:\n";
  cout << "    CREATE TABLE \n";
  cout << "To create base table, summary table, staging table\n\n";
  cout << "\nCreating the base table T\n";
  cout << "  CREATE TABLE T\n";
  cout << "    (C1 SMALLINT NOT NULL, C2 SMALLINT NOT NULL, \n";
  cout << "     C3 SMALLINT, C4 SMALLINT)\n";
  
  EXEC SQL CREATE TABLE T (C1 SMALLINT NOT NULL, C2 SMALLINT NOT NULL, 
                           C3 SMALLINT, C4 SMALLINT);
  EMB_SQL_CHECK(" create -- base table");
  EXEC SQL COMMIT;

  // create summary table 
  cout << "\nCreating summary table D_AST\n";
  cout << "  CREATE TABLE D_AST AS (SELECT C1, C2, COUNT(*)\n"; 
  cout << "    AS COUNT FROM T GROUP BY C1, C2) DATA INITIALLY\n";
  cout << "    DEFERRED REFRESH DEFERRED\n";

  EXEC SQL CREATE TABLE D_AST AS (SELECT C1, C2, COUNT(*) 
    AS COUNT FROM T GROUP BY C1, C2) DATA INITIALLY DEFERRED REFRESH DEFERRED;
  EMB_SQL_CHECK(" create -- summary table");
  EXEC SQL COMMIT;

  // create staging table 
  cout << "\nCreating the staging table G\n";
  cout << "  CREATE TABLE G FOR D_AST PROPAGATE IMMEDIATE\n";

  EXEC SQL CREATE TABLE G FOR D_AST PROPAGATE IMMEDIATE;
  EMB_SQL_CHECK(" create -- staging table");
  EXEC SQL COMMIT;

  return rc;
} // TbAst::CreateStagingTable 

// Show how to propagate the changes from base table to
// summary tables through the staging table
int TbAst::PropagateStagingToAst(void)
{
  int rc =0;

  cout << "\nBring staging table out of pending state\n";
  cout << "  SET INTEGRITY FOR G IMMEDIATE CHECKED\n";    
  EXEC SQL SET INTEGRITY FOR G IMMEDIATE CHECKED; 
  EMB_SQL_CHECK(" set -- integrity for statging table");
  EXEC SQL COMMIT;

  cout << "\nRefresh summary table, get it out of pending state.\n"; 
  cout << "  REFRESH TABLE D_AST NOT INCREMENTAL\n"; 
  EXEC SQL REFRESH TABLE D_AST NOT INCREMENTAL; 
  EMB_SQL_CHECK(" refresh -- summary table");
  EXEC SQL COMMIT;

  cout << "\nInsert data into base table T\n";
  strcpy(strStmt, "INSERT INTO T VALUES(1,1,1,1), (2,2,2,2), "
                  "                    (1,1,1,1), (3,3,3,3)");
  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK(" insert -- table");
  EXEC SQL COMMIT;

  cout << "Display the contents of staging table G.\n"; 
  cout << "The Staging table contains incremental changes to base table.\n"; 
  DisplayTable("G");

  cout << "\nRefresh the summary table\n";
  cout << "  REFRESH TABLE D_AST INCREMENTAL\n";
  EXEC SQL REFRESH TABLE D_AST INCREMENTAL; 
  EMB_SQL_CHECK(" refresh -- summary table");
  EXEC SQL COMMIT;

  cout << "\nDisplay the contents of staging table G\n"; 
  cout << "   NOTE: The staging table is pruned after AST is\n"; 
  cout << "         refreshed. The contents are propagated to AST\n";
  cout << "         from the staging table\n\n";
  DisplayTable("G");

  cout << "Display the contents of AST\n";
  cout << "Summary table has the changes propagated from staging table\n";
  DisplayTable("D_AST");
 
  return rc;
} // TbAst::PropageStagingToAst 
 
// Shows how to restore the data in a summary table 
int TbAst::RestoreSummaryTable(void)
{
  int rc = 0;
  cout << "\nBlock all modifications to the summary table\n";
  cout << "by setting the integrity to off\n";
  cout << "  (G is placed in pending and G.CC=N)\n";
  cout << "  SET INTEGRITY FOR G OFF\n";

  EXEC SQL SET INTEGRITY FOR G OFF;
  EMB_SQL_CHECK(" set -- integrity off for staging table");
  EXEC SQL COMMIT;

  cout << "\nExport the query definition in summary table and load\n";
  cout << "directly back to the summary table.\n";
  cout << "  (D_AST and G both in pending)\n";
  cout << "  SET INTEGRITY FOR D_AST OFF CASCADE IMMEDIATE\n";

  EXEC SQL SET INTEGRITY FOR D_AST OFF CASCADE IMMEDIATE;
  EMB_SQL_CHECK(" set -- integrity off for AST");
  EXEC SQL COMMIT;

  cout << "\nPrune staging table and place it in normal state\n";
  cout << "  (G.CC=F)\n";
  cout << "  SET INTEGRITY FOR G IMMEDIATE CHECKED PRUNE\n";

  EXEC SQL SET INTEGRITY FOR G IMMEDIATE CHECKED PRUNE;
  EMB_SQL_CHECK(" set -- integrity for G");
  EXEC SQL COMMIT;

  cout << "\nChanging staging table state to U\n";
  cout << "  (G.CC to U)\n";
  cout << "  SET INTEGRITY FOR G STAGING IMMEDIATE UNCHECKED\n";

  EXEC SQL SET INTEGRITY FOR G STAGING IMMEDIATE UNCHECKED;
  EMB_SQL_CHECK(" set -- integrity for G");
  EXEC SQL COMMIT; 

  cout << "\nPlace D_AST in normal and D_AST.CC to U\n";
  cout << "  SET INTEGRITY FOR D_AST MATERIALIZED QUERY\n"; 
  cout << "    IMMEDIATE UNCHECKED\n";

  EXEC SQL SET INTEGRITY FOR D_AST MATERIALIZED QUERY IMMEDIATE UNCHECKED;
  EMB_SQL_CHECK(" set -- integrity for G");
  EXEC SQL COMMIT;

  return rc;
} // TbAst::RestoreSummaryTable

// Displays the contents of the table being passed as the argument 
int TbAst::DisplayTable(char *table)
{
  int rc = 0;
  char tbl[10];
  
  strcpy(tbl, table);

  if (!strcmp(tbl, "G"))
  {
    cout <<  "  SELECT c1, c2, count FROM G\n\n";
    strcpy(strStmt, "SELECT c1, c2, count FROM G");

    EXEC SQL PREPARE stmt1 FROM :strStmt;
    EMB_SQL_CHECK("stmt1 -- prepare");
  }
  else if (!strcmp(tbl, "D_AST"))
  {
    cout <<  "  SELECT c1, c2, count FROM D_AST\n\n";
    strcpy(strStmt, "SELECT c1, c2, count FROM D_AST");

    EXEC SQL PREPARE stmt1 FROM :strStmt;
    EMB_SQL_CHECK("stmt1 -- prepare");
  }

  EXEC SQL DECLARE cur CURSOR FOR stmt1;

  EXEC SQL OPEN cur;
  EMB_SQL_CHECK("cursor -- open");

  EXEC SQL FETCH cur INTO :c1, :c2, :counter;
  EMB_SQL_CHECK("cursor -- fetch");

  cout <<  "  C1    C2    COUNT \n";
  cout <<  "  ------------------\n";
  
  while (sqlca.sqlcode != 100)
  {
    cout << "   "<< c1 <<"      "<< c2 <<"       "<<counter<<"\n";
    EXEC SQL FETCH cur INTO :c1, :c2, :counter;
    EMB_SQL_CHECK("cursor -- fetch");
  }

  cout <<  "\n";

  EXEC SQL CLOSE cur;
  EMB_SQL_CHECK("cursor -- close");

  return rc;
} // TbAst::DisplayTable 

// Drops the staging table, summary table and base table 
int TbAst::DropTables(void)
{
  int rc = 0;

  cout <<  "Dropping a base table implicitly drops summary table defined\n";
  cout <<  "on it which in turn cascades to dropping its staging table.\n";

  cout <<  "\nUSE THE SQL STATEMENT:\n";
  cout <<  "  DROP TABLE \n";
  cout <<  "To drop a table\n\n";
  cout <<  "  DROP TABLE T\n";

  strcpy(strStmt, "DROP TABLE T");

  EXEC SQL EXECUTE IMMEDIATE :strStmt;
  EMB_SQL_CHECK(" drop -- base table");
  EXEC SQL COMMIT;

  return rc;
}// TbAst::DropTables 

int main(int argc, char *argv[])
{
  int rc = 0;
  CmdLineArgs check;
  DbEmb db;
  TbAst ast; 
  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];
    
  // check the command line arguments
  rc = check.CmdLineArgsCheck1(argc, argv, db);
  if (rc != 0)
  {
    return rc;
  }

  cout <<  "\nTHIS SAMPLE SHOWS THE USAGE OF STAGING TABLE TO UPDATE"; 
  cout <<  "\nREFRESH DEFERRED AST AND RESTORE DATA IN A SUMMARY TABLE\n";

  // Connect to database
  cout <<  "\n-----------------------------------------------------------\n";

  // connect to the database
  rc = db.Connect();
  if (rc != 0)
  {
    return rc;
  }

  // create a base table, summary table, staging table 
  rc = ast.CreateStagingTable();
  if (rc != 0)
  {
    return rc;
  }
 
  cout <<  "\n-----------------------------------------------------------\n";

  // To show the propagation of changes of base table to
  // summary tables through the staging table 
  
  cout <<  "To show the propagation of changes from base table to\n";
  cout <<  "summary tables through the staging table:\n";
  rc = ast.PropagateStagingToAst();
  if (rc != 0)
  {
    return rc;
  }

  cout <<  "\n------------------------------------------------------------\n";
  
  // To show restoring of data in a summary table 

  cout <<  "\nTo show restoring of data in a summary table\n";
  rc = ast.RestoreSummaryTable();
  if (rc != 0)
  {
    return rc;
  }

  // drop the created tables 

  cout <<  "\nDrop the created tables\n";
  rc = ast.DropTables();
  if (rc != 0)
  {
    return rc;
  }

  // disconnect from the database
  rc = db.Disconnect();
  if (rc != 0)
  {
    return rc;
  }

  return 0;
} // main
