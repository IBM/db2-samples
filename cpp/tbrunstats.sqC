/****************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SOURCE FILE NAME: tbrunstats.sqC
**
** SAMPLE: How to perform runstats on a table
**
** DB2 APIs USED:
**         db2Runstats -- Runstats
**
** SQL STATEMENT USED:
**         SELECT
**
** STRUCTURES USED:
**         db2ColumnData
**         sqlca
**
** OUTPUT FILE: tbrunstats.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C++ applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For information on DB2 APIs, see the Administrative API Reference.
**
** For the latest information on programming, building, and running DB2 
** applications, visit the DB2 application development website: 
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <sqlenv.h>
#include <sqlutil.h>
#include <string.h>
#include <db2ApiDf.h>
#include "utilemb.h"
#if ((__cplusplus >= 199711L) && !defined DB2HP && !defined DB2AIX) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iostream>
   using namespace std;
#else
   #include <iostream.h>
#endif

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
  char user[129];
  char pswd[15];
  char tableName[129];
  char schemaName[129];
EXEC SQL END DECLARE SECTION;

class TbRunstat
{
  public:
    int TbRunstats(void);
  private:
    
    // support function
    int SchemaNameGet(void); 
};

// Gets the schema name of the table 
int TbRunstat::SchemaNameGet(void)
{
  struct sqlca sqlca;

  // get table schema name 
  EXEC SQL SELECT tabschema INTO :schemaName
    FROM syscat.tables
    WHERE tabname = :tableName;
  EMB_SQL_CHECK("table schema name -- get");

  // get rid of spaces from the end of schemaName 
  strtok(schemaName, " ");

  return 0;
} // TbRunstat::SchemaNameGet 

// Performs Runstats on the table 
int TbRunstat::TbRunstats(void)
{
  int rc = 0;
  struct sqlca sqlca;
  char fullTableName[258];
  db2Uint32 versionNumber = db2Version970;
  db2RunstatsData runStatData;
  db2ColumnData *columnList;

  cout << "\n-----------------------------------------------------------";
  cout << "\nUSE THE DB2 APIs:\n";
  cout << "  db2Runstats -- Runstats\n";
  cout << "TO UPDATE THE STATISTICS OF A TABLE.\n";

  // get fully qualified name of the table 
  strcpy(tableName, "EMPLOYEE");
  rc = SchemaNameGet();
  if (rc != 0)
  {
    return rc;
  }

  strcpy(fullTableName, schemaName);
  strcat(fullTableName, ".");
  strcat(fullTableName, tableName);

  cout << "  Update statistics for the table: "<< fullTableName<< " \n";

  columnList = new db2ColumnData;
  columnList->piColumnName = (unsigned char *)"empno";
  columnList->iColumnFlags = DB2RUNSTATS_COLUMN_LIKE_STATS;

  cout << "\nPerforming runstats on table EMPLOYEE for column EMPNO\n";
  cout << "with the following options:\n";
  cout << "    Distribution statistics for all partitions\n";
  cout << "    Frequent values for table set to 30\n";
  cout << "    Quantiles for table set to -1 (NUM_QUANTILES as in DB Cfg)\n";
  cout << "    Allow others to have read-only while gathering statistics\n";

  // runstats on table 
  runStatData.iSamplingOption = 0;
  runStatData.piTablename = (unsigned char *) fullTableName;
  runStatData.piColumnList = &columnList;
  runStatData.piColumnDistributionList = NULL;
  runStatData.piColumnGroupList = NULL;
  runStatData.piIndexList = NULL;
  runStatData.iRunstatsFlags = DB2RUNSTATS_KEY_COLUMNS | 
    DB2RUNSTATS_DISTRIBUTION | DB2RUNSTATS_ALLOW_READ;
  runStatData.iNumColumns = 1;
  runStatData.iNumColdist = 0;
  runStatData.iNumColGroups = 0;
  runStatData.iNumIndexes = 0;
  runStatData.iParallelismOption = 0;
  runStatData.iTableDefaultFreqValues = 30;
  runStatData.iTableDefaultQuantiles = -1;
  runStatData.iUtilImpactPriority      = 100;

  db2Runstats(versionNumber, &runStatData, &sqlca);

  DB2_API_CHECK("table -- runstats");
  
  delete columnList;

  cout << "\nMake sure to rebind all packages that use this table.\n";

  return rc;
} // TbRunstat::TbRunstats 

int main(int argc, char *argv[])
{
  int rc = 0;
  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];
  char nodeName[SQL_INSTNAME_SZ + 1];
  CmdLineArgs check;
  DbEmb db;
  TbRunstat tbrun;

  // check the command line arguments
  rc = check.CmdLineArgsCheck1(argc, argv, db);
  if (rc != 0)
  {
    return rc;
  }

  cout << "\nTHIS SAMPLE SHOWS ";
  cout << "HOW TO PERFROM RUNSTATS ON A TABLE.\n";

  // Connect to database
  cout <<  "\n-----------------------------------------------------------\n";

  // connect to the database
  rc = db.Connect();
  if (rc != 0)
  {
    return rc;
  }

  // call TbRunstats function
  rc = tbrun.TbRunstats();

  // disconnect from the database
  rc = db.Disconnect();
  if (rc != 0)
  {
    return rc;
  }

  return 0;
} // main
